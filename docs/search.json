[{"objectID":"syllabus.html","href":"syllabus.html","title":"Operating System (2025 Fall)","section":"","text":"&lt;table class=\"course-table\"&gt;\n  &lt;colgroup&gt;\n    &lt;col&gt;\n    &lt;col&gt;\n    &lt;col&gt;\n    &lt;col&gt;\n    &lt;col&gt;\n  &lt;/colgroup&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;W&lt;/th&gt;\n      &lt;th&gt;Topic&lt;/th&gt;\n      &lt;th&gt;Date&lt;/th&gt;\n      &lt;th&gt;Worksheet&lt;/th&gt;\n      &lt;th&gt;Events&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;!-- Week 1 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;1&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Introduction&lt;/td&gt;\n      &lt;td&gt;Mon 2025/09/01&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt; (prerequisite quiz at 10:45am)&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/09/03&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 2 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;2&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;File&lt;br/&gt;&lt;span class=\"keywords\"&gt;FD, Permission, user/group&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/09/08&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;a href=\"weeks/w2.html\" class=\"worksheet-link\"&gt;Worksheet 2&lt;/a&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/09/10&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 3 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;3&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Process&lt;br/&gt;&lt;span class=\"keywords\"&gt;fork, exec, linker/loader&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/09/15&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;a href=\"weeks/w3.html\" class=\"worksheet-link\"&gt;Worksheet 3&lt;/a&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-ta\"&gt;Office Hour&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/09/17&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 4 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;4&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Exception&lt;br/&gt;&lt;span class=\"keywords\"&gt;PCB, interrupt, privilege &lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/09/22&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-ta\"&gt;Office Hour&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/09/24&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 5 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;5&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;IPC&lt;br/&gt;&lt;span class=\"keywords\"&gt;pipe, shm, signal&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/09/29&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span style='font-weight:bold'&gt;&lt;span class=\"badge badge-noclass\"&gt;No class&lt;/span&gt; (Public Holiday)&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/10/01&lt;/td&gt;\n      &lt;td&gt;Guest Lecture: Alex K. Jones (Syracuse University)&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 6 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;6&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Scheduling&lt;br/&gt;&lt;span class=\"keywords\"&gt;proc state, sched algo&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/10/06&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span style='font-weight:bold'&gt;&lt;span class=\"badge badge-noclass\"&gt;No class&lt;/span&gt; (Public Holiday)&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/10/08&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 7 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;7&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Midterm exam&lt;/td&gt;\n      &lt;td&gt;Mon 2025/10/13&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-exam\"&gt;Exam&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/10/15&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 8 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;8&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;I/O&lt;br/&gt;&lt;span class=\"keywords\"&gt;Buffering, Direct I/O, Device Driver&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/10/20&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-ta\"&gt;Office Hour&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/10/22&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt; xv6 lab 1 announced&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 9 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;9&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;xv6&lt;br/&gt;&lt;span class=\"keywords\"&gt;syscall, boot&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/10/27&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-ta\"&gt;Office Hour&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/10/29&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 10 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;10&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Virtual Memory&lt;br/&gt;&lt;span class=\"keywords\"&gt;Mem. Management&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/11/03&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;xv6 lab 1 demo&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/11/05&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt; xv6 lab 2 announced&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 11 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;11&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Virtual Memory (2)&lt;br/&gt;&lt;span class=\"keywords\"&gt;Paging, Page Table&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/11/10&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-ta\"&gt;Office Hour&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/11/12&lt;/td&gt;\n      &lt;td&gt;&lt;span style='font-weight:bold'&gt;&lt;span class=\"badge badge-noclass\"&gt;No class&lt;/span&gt; (University Sport Event)&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 12 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;12&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Multi-threading&lt;br/&gt;&lt;span class=\"keywords\"&gt;Threading, Event-driven I/O&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/11/17&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;xv6 lab 2 demo&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/11/19&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 13 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;13&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Synchronization&lt;br/&gt;&lt;span class=\"keywords\"&gt;Locks, Semaphore, Cond. Var.&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/11/24&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-ta\"&gt;Office Hour&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/11/26&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 14 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;14&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;File-system&lt;br/&gt;&lt;span class=\"keywords\"&gt;FS Implementation, NFS&lt;/span&gt;&lt;/td&gt;\n      &lt;td&gt;Mon 2025/12/01&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-ta\"&gt;Office Hour&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/12/03&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-quiz\"&gt;Quiz&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 15 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;15&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;System Performance&lt;/td&gt;\n      &lt;td&gt;Mon 2025/12/08&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;\n        &lt;span class=\"coming-soon\"&gt;Coming Soon&lt;/span&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-ta\"&gt;Office Hour&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/12/10&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n\n    &lt;!-- Week 16 --&gt;\n    &lt;tr class=\"monday-row\"&gt;\n      &lt;td rowspan=\"2\" class=\"week-cell\"&gt;16&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"topic-cell\"&gt;Final Exam&lt;/td&gt;\n      &lt;td&gt;Mon 2025/12/15&lt;/td&gt;\n      &lt;td rowspan=\"2\" class=\"worksheet-cell\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;span class=\"badge badge-exam\"&gt;Exam&lt;/span&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"wednesday-row\"&gt;\n      &lt;td&gt;Wed 2025/12/17&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n\n\n````\n\n\n\n Back to top"},{"objectID":"index.html","href":"index.html","title":"Operating System (2025 Fall)","section":"","text":"W\nTopic\nDate\nWorksheet\nEvents\n\n\n\n\n1\nIntroduction\nMon 2025/09/01\n\nQuiz (prerequisite quiz at 10:45am)\n\n\nWed 2025/09/03\n\n\n\n2\nFile\nFD, Permission, user/group\nMon 2025/09/08\nWorksheet 2\n\n\n\nWed 2025/09/10\n\n\n\n3\nProcess\nfork, exec, linker/loader\nMon 2025/09/15\nWorksheet 3\nOffice Hour\n\n\nWed 2025/09/17\nQuiz\n\n\n4\nException\nPCB, interrupt, privilege \nMon 2025/09/22\nComing Soon\nOffice Hour\n\n\nWed 2025/09/24\nQuiz\n\n\n5\nIPC\npipe, shm, signal\nMon 2025/09/29\nComing Soon\nNo class (Public Holiday)\n\n\nWed 2025/10/01\nGuest Lecture: Alex K. Jones (Syracuse University)\n\n\n6\nScheduling\nproc state, sched algo\nMon 2025/10/06\nComing Soon\nNo class (Public Holiday)\n\n\nWed 2025/10/08\nQuiz\n\n\n7\nMidterm exam\nMon 2025/10/13\n\nExam\n\n\nWed 2025/10/15\n\n\n\n8\nI/O\nBuffering, Direct I/O, Device Driver\nMon 2025/10/20\nComing Soon\nOffice Hour\n\n\nWed 2025/10/22\nQuiz xv6 lab 1 announced\n\n\n9\nxv6\nsyscall, boot\nMon 2025/10/27\nComing Soon\nOffice Hour\n\n\nWed 2025/10/29\n\n\n\n10\nVirtual Memory\nMem. Management\nMon 2025/11/03\nComing Soon\nxv6 lab 1 demo\n\n\nWed 2025/11/05\nQuiz xv6 lab 2 announced\n\n\n11\nVirtual Memory (2)\nPaging, Page Table\nMon 2025/11/10\nComing Soon\nOffice Hour\n\n\nWed 2025/11/12\nNo class (University Sport Event)\n\n\n12\nMulti-threading\nThreading, Event-driven I/O\nMon 2025/11/17\nComing Soon\nxv6 lab 2 demo\n\n\nWed 2025/11/19\nQuiz\n\n\n13\nSynchronization\nLocks, Semaphore, Cond. Var.\nMon 2025/11/24\nComing Soon\nOffice Hour\n\n\nWed 2025/11/26\nQuiz\n\n\n14\nFile-system\nFS Implementation, NFS\nMon 2025/12/01\nComing Soon\nOffice Hour\n\n\nWed 2025/12/03\nQuiz\n\n\n15\nSystem Performance\nMon 2025/12/08\nComing Soon\nOffice Hour\n\n\nWed 2025/12/10\n\n\n\n16\nFinal Exam\nMon 2025/12/15\n\nExam\n\n\nWed 2025/12/17","crumbs":["Home","OS 2025 Fall"]},{"objectID":"index.html#information","href":"index.html#information","title":"Operating System (2025 Fall)","section":"Information","text":"Information\nThis course guides you to explore how operating systems work “under the hood.” You will learn how operating systems manage hardware resources, and how to ensure secure and fair resource sharing among processes. We will discuss process management, system calls, virtual memory, storage, scheduling, virtualization, and modern system architectures. You will learn by doing to acquire the skills to analyze, debug, and improve complex systems you use every day.\nTime: Monday 10:10~12:10 & Wednesday 09:00~09:50\nClassroom: DELTA 台達 102 (容量100)\nTextbook:\n\nOperating Systems: Three Easy Pieces, Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau\nOperating System Concepts, 10/e, Abraham Silberschatz and James Peterson.\n\nGrading:\n\nLabs (16%)\nMidterm Exam (30%)\nFinal Exam (34%)\nQuiz (20%)\nExploration Project (10%)\n\nTotal possible points: 110 + bonus points from shio winner\nLanguage: Instructor will mostly speak English, but you aren’t restricted not to speak Mandarin (歡迎以中文發言).\nExam: Midterm and final exam are paper-based, closed-book, no devices.\nDetailed Policies","crumbs":["Home","OS 2025 Fall"]},{"objectID":"index.html#cast","href":"index.html#cast","title":"Operating System (2025 Fall)","section":"Cast","text":"Cast\nNini and Niko will be your friends throughout your journey of operating system this semester.\n\n\n\n\n\nNini\n\n\n\nNini is a smart cat, like Doraemon, but not a robot. Nini is the CTO of Datadog, the company that offers Linux server monitoring service.\nBefore joining Datadog, Nini worked at Redhat.\n\nFavorite catchphrase: “A piece of fish!”\nFavorite tools on Linux: *cat (cat, zcat, net-cat, netcat, socat etc.)\n\n\n\n\n\n\n\n\nNiko\n\n\n\nNiko is a nervous, but humble cat, like bugcat Capoo. Niko works as a junior engineer at Datadog.\nNiko works hard developing his company’s dog tool (there are many cats and cows on Linux, but not many dogs). Niko’s favorite animal is panda (a stronger and bigger cat, he thought).\n\nFavorite catchphrase: “Le Mao!”\nFavorite tools on Linux: cowsay with Capoo, yes\nFavorite food: Katsudon","crumbs":["Home","OS 2025 Fall"]},{"objectID":"admin/explore.html","href":"admin/explore.html","title":"Operating System (2025 Fall)","section":"","text":"In this course, I hope you can learn by teaching and exploring based on your interest.\nStarting after the midterm, every team will work on an Exploration Project. Each team will pick a topic. By the end of the semester, each team will make a short video (3-5 minutes) to share with your classmates. The goal is not to repeat what we’ve already taught, but to dig deeper into the “why” behind the topics, and connect them to real-world problems.\nThis project is your chance to ask your own questions, explain concepts in your own words, and make sense of complex ideas through your own exploration.\n\n\nWe will annouce a list of topics and papers for you to choose from before midterm. But you are also welcome to propose your own ideas if you have something you’re curious about. Your project can take one of these directions:\n\n\n\nPick a topic, research it very thoroughly, and produce a short video that teaches this topic to your classmates. Please make it very fun and educational to watch. You can also teach about common misconceptions, or parts that confused you at first, and helps your audience go through it.\n\n\n\nWe will give you a list of research papers on OS topics. But instead of focusing on the methods and results, your task is to explain the background and motivation of the paper. Why was this problem important? Which textbook concept does it relate to? What was missing from the traditional approach? Your video should help your classmates understand why this paper needed to be written.\n\n\n\n\n\nAfter the midterm, you’ll see a list of suggested topics and papers.\nEach topic is available to one team only. Topic is chosen First-come-first-serve (先搶先贏).\nYour team will need to submit a simple proposal: What’s your topic? What’s your approach? Who will do what?\nIf you have an idea outside of the suggested list, propose it! We’re open to creative projects as long as they connect to OS concepts.\n\n\n\n\n\n\nFinal videos are due at 23:59, Dec. 23.\nAll videos will be showcased on our course website — your classmates will watch and learn from your work.\nYou’ll also provide feedback to other teams’ videos through a simple peer review form.\n\n\n\n\n\n\n\n\nEvaluation Criteria (Rubric)\n\n\n\n\n\nEach project will be graded out of 10 points based on these aspects:\n1. Clarity of Explanation (2 points)\nCan you explain the concept in a way that others (students or non-CS audience) can easily follow? Are technical terms introduced and clarified well?\n2. Depth of Understanding (3 points)\nDid you show that you understand not just the “what”, but the “why” behind the concept or problem? Did you connect it to textbook materials or real-world scenarios?\n3. Structure and Presentation (2 points)\nIs the video well-structured, with a logical flow? Is it visually engaging, with clear narration and visuals that support understanding?\n4. Team Collaboration (2 points)\nDid all team members contribute meaningfully? Are multiple voices or roles evident in the video production?\n5. Creativity and Insight (Bonus +1 point)\nExceptional creativity in presentation or particularly insightful explanations will be awarded an extra point.\nThe scores will be a combination of TA assessment and peer feedback. Peer feedback will not directly give points, but thoughtful comments from peers will help you gain participation credit."},{"objectID":"admin/explore.html#os-exploration-project","href":"admin/explore.html#os-exploration-project","title":"Operating System (2025 Fall)","section":"","text":"In this course, I hope you can learn by teaching and exploring based on your interest.\nStarting after the midterm, every team will work on an Exploration Project. Each team will pick a topic. By the end of the semester, each team will make a short video (3-5 minutes) to share with your classmates. The goal is not to repeat what we’ve already taught, but to dig deeper into the “why” behind the topics, and connect them to real-world problems.\nThis project is your chance to ask your own questions, explain concepts in your own words, and make sense of complex ideas through your own exploration.\n\n\nWe will annouce a list of topics and papers for you to choose from before midterm. But you are also welcome to propose your own ideas if you have something you’re curious about. Your project can take one of these directions:\n\n\n\nPick a topic, research it very thoroughly, and produce a short video that teaches this topic to your classmates. Please make it very fun and educational to watch. You can also teach about common misconceptions, or parts that confused you at first, and helps your audience go through it.\n\n\n\nWe will give you a list of research papers on OS topics. But instead of focusing on the methods and results, your task is to explain the background and motivation of the paper. Why was this problem important? Which textbook concept does it relate to? What was missing from the traditional approach? Your video should help your classmates understand why this paper needed to be written.\n\n\n\n\n\nAfter the midterm, you’ll see a list of suggested topics and papers.\nEach topic is available to one team only. Topic is chosen First-come-first-serve (先搶先贏).\nYour team will need to submit a simple proposal: What’s your topic? What’s your approach? Who will do what?\nIf you have an idea outside of the suggested list, propose it! We’re open to creative projects as long as they connect to OS concepts.\n\n\n\n\n\n\nFinal videos are due at 23:59, Dec. 23.\nAll videos will be showcased on our course website — your classmates will watch and learn from your work.\nYou’ll also provide feedback to other teams’ videos through a simple peer review form.\n\n\n\n\n\n\n\n\nEvaluation Criteria (Rubric)\n\n\n\n\n\nEach project will be graded out of 10 points based on these aspects:\n1. Clarity of Explanation (2 points)\nCan you explain the concept in a way that others (students or non-CS audience) can easily follow? Are technical terms introduced and clarified well?\n2. Depth of Understanding (3 points)\nDid you show that you understand not just the “what”, but the “why” behind the concept or problem? Did you connect it to textbook materials or real-world scenarios?\n3. Structure and Presentation (2 points)\nIs the video well-structured, with a logical flow? Is it visually engaging, with clear narration and visuals that support understanding?\n4. Team Collaboration (2 points)\nDid all team members contribute meaningfully? Are multiple voices or roles evident in the video production?\n5. Creativity and Insight (Bonus +1 point)\nExceptional creativity in presentation or particularly insightful explanations will be awarded an extra point.\nThe scores will be a combination of TA assessment and peer feedback. Peer feedback will not directly give points, but thoughtful comments from peers will help you gain participation credit."},{"objectID":"admin/waitbutwhy.html","href":"admin/waitbutwhy.html","title":"燒蛋一下 SHIO DAN JI LIE","section":"","text":"燒蛋一下 SHIO DAN JI LIE\n\n\n當你在看課堂影片、讀教科書、或做實驗的時候，有沒有突然 OS … 「咦？等一下！」？ (When you’re watching a lecture video, reading the textbook, or doing lab, do you suddenly have the OS … “Eh? Wait, but why?”?)\n請先暫停，自己思考並找出答案。讓你的好奇心飛翔！ (Please pause, think and find the answer yourself. Let your curiosity fly!)\n\n\n\n\n\n當沒講清楚、教科書帶過去、大家都沒想過的時候，要發問： (Ask when it wasn’t explained clearly, glossed over in the textbook, or nobody thought about it:)\n\n\n「為什麼會是這樣？」 (“Why is this like this?”)\n「它總是這樣運作嗎？」 (“Does it always work this way?”)\n「我能打破這個假設嗎？」 (“Can I break this assumption?”)\n\n\n寫下你的問題：要具體。不是「什麼是 context switch」這種查教科書就有的問題， 而是「影片說 context switch 有 overhead，那在 multicore CPU 時會怎樣？」這種能延伸的問題。 (Write down your question: Be specific. Not something like “What is a context switch?” which the textbook directly explains, but rather “The video says context switch has overhead—what happens on a multicore CPU?” which extends the idea.)\n找答案：查資料、動手試、推敲出答案。 (Find the answer: Look things up, experiment, reason out the answer.)\n\n\n\n\nReal exploration earns real respect.\n\n\n\n\n\n\n\nWhat makes a good “Shio Dan Ji Lie” question?\n\n\n\n\n\n\nGenuine Curiosity\nDon’t ask for the sake of asking (問爽的). Ask because it needs to be asked. 是因為你真心覺得這個地方值得探討。\nGoes Beyond the Obvious\n教科書沒寫清楚的地方、影片沒講透的細節、實作時才發現的 tricky 點。\nSelf-Driven Discovery\n你不是問老師「老師這是什麼」，而是自己查了資料、找了paper、甚至寫code驗證。\nExplains Back to Others\n你能把這段探索經過整理給大家看，幫助同學一起了解這個問題。\n\nIt’s not about asking hard questions.\nIt’s about asking real, alive, questions — the ones you personally want to figure out.\n\n\n\n\n\n\n\n Back to top"},{"objectID":"handouts/env_setup.html","href":"handouts/env_setup.html","title":"Environment setup","section":"","text":"Installing VirtualBox, visit the VirtualBox website using this link\n\n\n\n\n\nInstalling Vagrant Go to the Vagrant download page at link, and under the “Operating System” heading, click on the appropriate “Binary” for your computer. The installer will be downloaded to your computer.\n\n\n\n\n\n\n\nChoose AMD64 if you are using Windows 64bits\n\n\n\n\n\n\n\nSetting up the Ubuntu machine\n\nList out the files in the home directory cd ~ using the ls command to check if Vagrant was successfully installed, you should find the file .vagrant.d.\nAfter confirming the installation, create a directory for the Ubuntu setup using the mkdir\nChange into the directory that you created\nRun vagrant init command. Running this command automatically places a Vagrantfile in the directory created above. A Vagrantfile is a file that instructs Vagrant to create new Vagrant machines or boxes.\n\n\n\n\nrun vagrant init alvistack/ubuntu-24.04 --box-version 20250802.1.1 then vagrant up\n\nBringing machine 'default' up with 'virtualbox' provider...\n==&gt; default: Box 'alvistack/ubuntu-24.04' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: 20250802.1.1\n==&gt; default: Loading metadata for box 'alvistack/ubuntu-24.04'\n    default: URL: https://vagrantcloud.com/api/v2/vagrant/alvistack/ubuntu-24.04\n==&gt; default: Adding box 'alvistack/ubuntu-24.04' (v20250802.1.1) for provider: virtualbox (amd64)\n    default: Downloading: https://vagrantcloud.com/alvistack/boxes/ubuntu-24.04/versions/20250802.1.1/providers/virtualbox/amd64/vagrant.box\n    default:\n==&gt; default: Successfully added box 'alvistack/ubuntu-24.04' (v20250802.1.1) for 'virtualbox (amd64)'!\n==&gt; default: Importing base box 'alvistack/ubuntu-24.04'...\n\nSSH to your vagrant machine\n\nEnsure your virtual box VM is running\nConnect to the VM using vagrant ssh\n\n\n\n\n\n\nCheck the architecture of your machine\n\n$ arch\narm64\nYou can also use uname -m to check the architecture.\n\nEnsure Homebrew is installed\n\n$ brew --version\nHomebrew 4.6.9\nIf Homebrew is not installed, run the following command to install it:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nInstall Vagrant via Homebrew\n\n$ brew tap hashicorp/tap\n$ brew install --cask hashicorp-vagrant\n\nInstall QEMU via Homebrew\n\n$ brew install qemu\n\nInstall the vagrant-qemu plugin\n\n$ vagrant plugin install vagrant-qemu\n\nCreate a Vagrant workspace\n\n$ mkdir ~/os-workspace\n$ cd ~/os-workspace\n\nInitialize the Vagrantfile\n\n$ vagrant init -m perk/ubuntu-24.04-arm64\n\nStart the Vagrant VM\n\n$ vagrant up --provider qemu\n\nSSH into the Vagrant machine\n\n$ vagrant ssh\n\nDestroy the VM when no longer needed\n\n$ cd ~/os-workspace\n$ vagrant status\nCurrent machine states:\n\ndefault                  running (qemu)\n$ vagrant destroy\n    default: Are you sure you want to destroy the 'default' VM? [y/N] y\n==&gt; default: Stopping the instance...\n==&gt; default: Destroying the instance..\n$ vagrant status\nCurrent machine states:\n\ndefault                  not_created (qemu)\nReference\n\n\n\n\n\n\n\n\n\nThe following steps should be run in the VS Code terminal\n\n\n\n\n\n\n\nChange to the directory containing the Vagrantfile\n\n~$ cd $(vagrant_machine)\n\nGet the SSH config that Vagrant uses:\n\n~/$(vagrant_machine)$ vagrant ssh-config\nHost default\n  HostName 127.0.0.1\n  User vagrant\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/liz/vagrant/machine/.vagrant/machines/default/virtualbox/private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nCopy the output of this into an SSH config file — I added it to my default SSH config at ~/.ssh/config. In VScode you can easily open this file, or generate a custom config file for VSCode to use, by pressing ⌘⇧P and selecting Remote-SSH: Open Configuration File…\n\n\n\nThen connect to the host, you can also click on the Remote “Quick Access” status bar item in the lower left corner to get a list of the most common commands.\n\nBonus: if you put the config in your default SSH config file, you can now also SSH into the box from your laptop terminal with ssh default, saving you the bother of moving into the Vagrant machine’s directory.\n\n\n\n\n\n@黃頂軒\n@Everydayhappy","crumbs":["Home","Worksheet 2","Environment setup"]},{"objectID":"handouts/env_setup.html#virtual-box","href":"handouts/env_setup.html#virtual-box","title":"Environment setup","section":"","text":"Installing VirtualBox, visit the VirtualBox website using this link","crumbs":["Home","Worksheet 2","Environment setup"]},{"objectID":"handouts/env_setup.html#vagrant-windows","href":"handouts/env_setup.html#vagrant-windows","title":"Environment setup","section":"","text":"Installing Vagrant Go to the Vagrant download page at link, and under the “Operating System” heading, click on the appropriate “Binary” for your computer. The installer will be downloaded to your computer.\n\n\n\n\n\n\n\nChoose AMD64 if you are using Windows 64bits\n\n\n\n\n\n\n\nSetting up the Ubuntu machine\n\nList out the files in the home directory cd ~ using the ls command to check if Vagrant was successfully installed, you should find the file .vagrant.d.\nAfter confirming the installation, create a directory for the Ubuntu setup using the mkdir\nChange into the directory that you created\nRun vagrant init command. Running this command automatically places a Vagrantfile in the directory created above. A Vagrantfile is a file that instructs Vagrant to create new Vagrant machines or boxes.\n\n\n\n\nrun vagrant init alvistack/ubuntu-24.04 --box-version 20250802.1.1 then vagrant up\n\nBringing machine 'default' up with 'virtualbox' provider...\n==&gt; default: Box 'alvistack/ubuntu-24.04' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: 20250802.1.1\n==&gt; default: Loading metadata for box 'alvistack/ubuntu-24.04'\n    default: URL: https://vagrantcloud.com/api/v2/vagrant/alvistack/ubuntu-24.04\n==&gt; default: Adding box 'alvistack/ubuntu-24.04' (v20250802.1.1) for provider: virtualbox (amd64)\n    default: Downloading: https://vagrantcloud.com/alvistack/boxes/ubuntu-24.04/versions/20250802.1.1/providers/virtualbox/amd64/vagrant.box\n    default:\n==&gt; default: Successfully added box 'alvistack/ubuntu-24.04' (v20250802.1.1) for 'virtualbox (amd64)'!\n==&gt; default: Importing base box 'alvistack/ubuntu-24.04'...\n\nSSH to your vagrant machine\n\nEnsure your virtual box VM is running\nConnect to the VM using vagrant ssh","crumbs":["Home","Worksheet 2","Environment setup"]},{"objectID":"handouts/env_setup.html#vagrant-macos-apple-silicon","href":"handouts/env_setup.html#vagrant-macos-apple-silicon","title":"Environment setup","section":"","text":"Check the architecture of your machine\n\n$ arch\narm64\nYou can also use uname -m to check the architecture.\n\nEnsure Homebrew is installed\n\n$ brew --version\nHomebrew 4.6.9\nIf Homebrew is not installed, run the following command to install it:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nInstall Vagrant via Homebrew\n\n$ brew tap hashicorp/tap\n$ brew install --cask hashicorp-vagrant\n\nInstall QEMU via Homebrew\n\n$ brew install qemu\n\nInstall the vagrant-qemu plugin\n\n$ vagrant plugin install vagrant-qemu\n\nCreate a Vagrant workspace\n\n$ mkdir ~/os-workspace\n$ cd ~/os-workspace\n\nInitialize the Vagrantfile\n\n$ vagrant init -m perk/ubuntu-24.04-arm64\n\nStart the Vagrant VM\n\n$ vagrant up --provider qemu\n\nSSH into the Vagrant machine\n\n$ vagrant ssh\n\nDestroy the VM when no longer needed\n\n$ cd ~/os-workspace\n$ vagrant status\nCurrent machine states:\n\ndefault                  running (qemu)\n$ vagrant destroy\n    default: Are you sure you want to destroy the 'default' VM? [y/N] y\n==&gt; default: Stopping the instance...\n==&gt; default: Destroying the instance..\n$ vagrant status\nCurrent machine states:\n\ndefault                  not_created (qemu)\nReference","crumbs":["Home","Worksheet 2","Environment setup"]},{"objectID":"handouts/env_setup.html#vagrant-ssh-from-vs-code","href":"handouts/env_setup.html#vagrant-ssh-from-vs-code","title":"Environment setup","section":"","text":"The following steps should be run in the VS Code terminal\n\n\n\n\n\n\n\nChange to the directory containing the Vagrantfile\n\n~$ cd $(vagrant_machine)\n\nGet the SSH config that Vagrant uses:\n\n~/$(vagrant_machine)$ vagrant ssh-config\nHost default\n  HostName 127.0.0.1\n  User vagrant\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/liz/vagrant/machine/.vagrant/machines/default/virtualbox/private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nCopy the output of this into an SSH config file — I added it to my default SSH config at ~/.ssh/config. In VScode you can easily open this file, or generate a custom config file for VSCode to use, by pressing ⌘⇧P and selecting Remote-SSH: Open Configuration File…\n\n\n\nThen connect to the host, you can also click on the Remote “Quick Access” status bar item in the lower left corner to get a list of the most common commands.\n\nBonus: if you put the config in your default SSH config file, you can now also SSH into the box from your laptop terminal with ssh default, saving you the bother of moving into the Vagrant machine’s directory.","crumbs":["Home","Worksheet 2","Environment setup"]},{"objectID":"handouts/env_setup.html#contributors","href":"handouts/env_setup.html#contributors","title":"Environment setup","section":"","text":"@黃頂軒\n@Everydayhappy","crumbs":["Home","Worksheet 2","Environment setup"]},{"objectID":"weeks/w3.html","href":"weeks/w3.html","title":"Operating System (2025 Fall)","section":"","text":"eLearn link: Process creation: fork+exec\nAfter the lecture, you will learn the following concept:\n\nfork + exec + waitpid\nZombie process / Orphan process / Double fork\nBackground job (&)\nShell built—in commands\n$PATH environment variable: the executable location\n\n\n\n\n\nThe Abstraction: The Process\nThe Process API\nThe UNIX Philosophy: Everything is a File\n\n\n\n\n\nMini-cloud: explore virtual machine and Docker container\nProcess creation: explore more about fork() and exec().\nLinking (this lab last for two weeks, concept check: Sept. 24): explore how executable is built and distributed through library","crumbs":["Home","Worksheet 3"]},{"objectID":"weeks/w3.html#worksheet-3","href":"weeks/w3.html#worksheet-3","title":"Operating System (2025 Fall)","section":"","text":"eLearn link: Process creation: fork+exec\nAfter the lecture, you will learn the following concept:\n\nfork + exec + waitpid\nZombie process / Orphan process / Double fork\nBackground job (&)\nShell built—in commands\n$PATH environment variable: the executable location\n\n\n\n\n\nThe Abstraction: The Process\nThe Process API\nThe UNIX Philosophy: Everything is a File\n\n\n\n\n\nMini-cloud: explore virtual machine and Docker container\nProcess creation: explore more about fork() and exec().\nLinking (this lab last for two weeks, concept check: Sept. 24): explore how executable is built and distributed through library","crumbs":["Home","Worksheet 3"]},{"objectID":"weeks/w3.html#learning-goals","href":"weeks/w3.html#learning-goals","title":"Operating System (2025 Fall)","section":"Learning Goals","text":"Learning Goals\nSept. 17 Quiz will check:\n\nI understand how a process is created through fork and exec.\nI understand the purpose of environment variable.\nI understand the purpose of the PATH environment variable.\nI understand what a zombie/orphan/daemon process is.\nI understand double fork, and quiz of multiple forks in the video lecture.\nI know at least one biggest difference between Docker container and virtual machine (Mini-cloud)\nI understand why Unix adopts the Everything is a File philosophy and the advantage of its approach of handling text streams between processes, compared to using dedicated API for IPC, like Powershell. (UNIX Philosophy)\n\nSept. 24 Quiz will check:\n\nI understand the difference between static and shared library, the advantage and disadvtange of each approach, and in which scenario they are used.","crumbs":["Home","Worksheet 3"]},{"objectID":"weeks/w3.html#additional-resource-for-w1","href":"weeks/w3.html#additional-resource-for-w1","title":"Operating System (2025 Fall)","section":"Additional resource for W1","text":"Additional resource for W1\n\n\n\n\n\n\ndelete-opened-file trick\n\n\n\n\n\nLast week we talk about the delete-opened-file trick where hacker uses to hide themselves (run an executable and immediately delete the executable to prevent administrator to find clues about what kind of process is being run).\nI also did a classroom demo of how the space of a file can’t be released until the process who opened it has been shut down. If you want to reproduce that in Google Colab, here’s the commands:\n# create a dummy big file\ndd if=/dev/zero of=bigfile.txt bs=4M count=1000\npython3\n&gt;&gt; f = open(\"bigfile.txt\")\n&gt;&gt; import os\n&gt;&gt; os.getpid() # get my process ID\n\n....\n# now remove the big file\nrm bigfile.txt\n\n# open another terminal window in TMUX with ctrl-b c\n# replace [PID] above with process ID\ncd /proc/[PID]/fd\n\n# you can see the opened files of the python process\n# including the deleted big file\nls\n\n....\n# use ctrl-b n to switch back to the previous TMUX window\n# the python process\n# you are able to read the deleted file.  The file disappear from ls, but is still\n# not cleaned up by the OS because a process still keeps it opened\n&gt;&gt; b = f.read()\n\n# kill the python process\nkill [PID]\n\n\n\n\n\n\n\n\n\npriviledge escalation\n\n\n\n\n\nHere’s another movie that show how hacker use tools to exploit the bug in OS and get root permission through priviledge escalation.","crumbs":["Home","Worksheet 3"]},{"objectID":"labs/linking.html","href":"labs/linking.html","title":"Static vs Dynamic Linking","section":"","text":"Loading required package: exams"},{"objectID":"labs/linking.html#hands-on","href":"labs/linking.html#hands-on","title":"Static vs Dynamic Linking","section":"1. Hands-On","text":"1. Hands-On\n\nRun ./setup.sh to install LZ4 into the directory /os.\nBuild a static lz4cat and run it.\nBuild a dynamic lz4cat, watch it fail at run time, then fix it with LD_LIBRARY_PATH.\nBuild a dynamic+RPATH lz4cat that runs without environment variables.\nCompare binaries and inspect metadata (ldd, readelf -d).\n\n\nSetup\n./setup.sh\nSearch for the following variables in the Makefile:\n\nLIBRARY_PATH — Build-time search path for the linker to resolve -lfoo to libfoo.a / libfoo.so. No effect at run time.\nLD_LIBRARY_PATH — Run-time search path for the dynamic loader to locate needed .so when the program starts. Ignored by static binaries.\nRPATH (-Wl,-rpath,&lt;dir&gt;) — A path baked into the ELF at build time that the loader uses at run time (no env vars needed).\n\n\n\nStatic\nmake build_static, then make run_static\nVerify it doesn’t depend on any other library: ldd ./b/lz4cat_static\n\n\nDynamic\nmake build_dyn, then make run_dyn1, make run_dyn2.\nThe dynamic binary can be compiled, but it fails to start until the loader can find liblz4.so (you fix this with LD_LIBRARY_PATH)\n\n\nRPATH\nmake build_dyn_rpath, then make run_rpath\nThe RPATH hardcodes /os/lib into the ELF so it runs with no env var.\n\nmake inspect (see sizes, ldd, readelf -d)"},{"objectID":"labs/linking.html#concept-check","href":"labs/linking.html#concept-check","title":"Static vs Dynamic Linking","section":"Concept Check","text":"Concept Check\nQ1. Which environment variable is read at build time by the linker to find -lXXX library? LIBRARY_PATHLD_LIBRARY_PATHRPATH\nQ2. Which environment variable is read at run time by the dynamic loader to find .so files? LIBRARY_PATHLD_LIBRARY_PATHRPATH\nQ3. Which one hardcode the library path into the binary, so we don’t depend on any environment variable at runtime? LIBRARY_PATHLD_LIBRARY_PATHRPATH\nQ4. Your dynamic binary failed before you exported LD_LIBRARY_PATH. What failed? the compilerthe linkerthe runtime loader\nQ5. Assume a library libX size = 3 MiB (code),. Ignore data and ASLR effects for this exercise. Two different executables A and B: 1) Each program’s own code = 1 MiB. 2) Each runs 1 process on the same machine. 3) Both use libX.\n(a) Static linking — what is the total disk footprint?  \n(b) Dynamic linking — what is the total disk footprint?  \nQ6. Same scenario, but now 50 processes of A and 50 processes of B run concurrently. Which has smaller RAM use for libX code pages (text)? Static — each process has its own copyDynamic — all processes map the same .so pagesEqual\nQ7. If two different statically linked executables contain byte-identical copies of libX’s code, the kernel will naturally share the same memory pages across the two executables. TrueFalse"},{"objectID":"labs/linking.html#shared-libraries","href":"labs/linking.html#shared-libraries","title":"Static vs Dynamic Linking","section":"2. Shared Libraries","text":"2. Shared Libraries\nVisit these Alpine package pages and examine their “Required by”.\n\nlibncurses: https://pkgs.alpinelinux.org/package/edge/main/x86_64/libncursesw\nlibgcc (GCC runtime support): https://pkgs.alpinelinux.org/package/edge/main/x86_64/libgcc\nlibssl (TLS/crypto): https://pkgs.alpinelinux.org/package/edge/main/x86/libssl3\nlibzip (compression): https://pkgs.alpinelinux.org/package/edge/community/x86/libzip\n\nQ8. Which library is the most widely required of the four? libziplibssllibncurseslibgcc\nQ9. Which of the following correctly describe the purpose ncurses? API for building text-based user interfaces in a terminalAPI for cursing N peopleAPI for GPU programmingAPI for GUI widgets for mouse-driven desktop apps\nQ10. “Required by” on those pages reports… reverse dependencies (packages that depend on the library)forward dependencies (libraries this package needs)\nQ11. What is the best reason why libgcc shows up as a dependency so often? It provides GCC runtime support used by most compiled programsIt is only used for terminal colorsIt is specific to ZIP file handling"},{"objectID":"labs/linking.html#readings","href":"labs/linking.html#readings","title":"Static vs Dynamic Linking","section":"3. Readings","text":"3. Readings\nIn the lecture, we talk about how shared libraries can amortize memory consumption because multiple processes can map the same .so and share text segments. However, what if the library is very niche, and not many processes need it? These articles give us a different perspective to consider.\n\nOne-binary deployment perspective — cross-compile for different architectures, easy to copy around different machines: link 1\nSize perspective — when (and when not) dynamic linking actually wins for binary size: link 2\nSecurity perspective: It is commonly believed that dynamic linking allows for easier security patching because you update a shared library once, and all applications using it are protected. Read this article to learn about the security risk made possible by LD_PRELOAD: link 3 (Other fun things you can do)\n\nQ12. According to article 2, if a library is only used by one program on the entire machine. It is more cost-effective to use: Static binaryDynamically linked binary\nQ13. A C program compiled on Ubuntu 24.04 and linked only to libc will run on Ubuntu 18.04, because both Ubuntu 24.04 and 18.04 are installed with libc. TrueFalse\nQ14. You’re the developer of a single commandline tool fzf. On your Github repo, what’s the safest way to ship your program so it can run on multiple architectures? Static binaryDynamically linked binary\nQ15. According to article 3, what are some possible things you can do with LD_PRELOAD?\n\nChange the behavior of a system callGain administrator priviledgeMonitor a program’s outgoing network traffic"},{"objectID":"labs/mini-cloud.html","href":"labs/mini-cloud.html","title":"Operating System (2025 Fall)","section":"","text":"This week, your mission is to help a new engineer at the cloud company, Datadog.\nMeet Niko!! He’s a vegetable bird (菜鳥), and is a little nervous about his first big assignment. His boss, Nini, asked him to play with a virtual mini-cloud before he is allowed to touch a real client’s production environment.\nYour job is to follow Nini’s instructions and help Niko succeed. Ready?","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#your-first-week-in-os-journey","href":"labs/mini-cloud.html#your-first-week-in-os-journey","title":"Operating System (2025 Fall)","section":"","text":"This week, your mission is to help a new engineer at the cloud company, Datadog.\nMeet Niko!! He’s a vegetable bird (菜鳥), and is a little nervous about his first big assignment. His boss, Nini, asked him to play with a virtual mini-cloud before he is allowed to touch a real client’s production environment.\nYour job is to follow Nini’s instructions and help Niko succeed. Ready?","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#a-bubble-within-a-bubble","href":"labs/mini-cloud.html#a-bubble-within-a-bubble","title":"Operating System (2025 Fall)","section":"A Bubble Within a Bubble","text":"A Bubble Within a Bubble\nNini: “At Datadog, we manage big, complex cloud systems. Your training starts with a small, safe version. You’ll work inside a Docker container on GitHub Codespaces. Inside this container, you will use a tool called a hypervisor (QEMU) to launch three fully independent Virtual Machines (VMs). Essentially, you’re building a bubble inside of another bubble.”\nNiko: “A bubble in a bubble? And what’s the difference between a container and a VM?”\n\n\nMore info: Container vs. VM Differences.\nNini: “Great question! Let me put it this way…”\n\n\n\n\n\n\nUniversities Within a University\n\n\n\n\n\nThink of the giant GitHub server as NTHU’s main campus: it has one central operating system, the kernel.\nOur Codespace container is like the CS Department building on that campus. It’s an isolated space, but it still shares the main campus’s resources and underlying kernel. If you look around from inside the CS building, you only see CS stuff; you don’t see the activities of the Physics or Chemistry departments.\nNow, the magic starts. Inside our CS Department building, we will create three brand new, tiny, simulated universities. Each Virtual Machine (VM) is a whole new mini-university, with its own kernel.\n\nA mini-NTHU (Debian VM)\nA mini-NTU (Alpine VM)\nA mini-NYCU (Router7 VM) (交大的確是台灣學術網路的骨幹喔)\n\nOur container just shares a kernel, but a VM is a whole new kernel.\n\n\n\nIn this mini-cloud, the Debian and Alpine VMs will act as servers. All their traffic will pass through the Router7 VM, which works just like a Wi-Fi router at home (which also runs a Linux kernel!).","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#set-up-your-mini-cloud","href":"labs/mini-cloud.html#set-up-your-mini-cloud","title":"Operating System (2025 Fall)","section":"Set up Your Mini-cloud","text":"Set up Your Mini-cloud\nClick the button below and click “Create Codespace”. This will open a web-based VS Code devcontainer on Github.\n.\nIt might take a minute or two for the Codespace to build. Once you see a VS Code interface with a terminal at the bottom, you’re ready to go.\nIn the terminal, run the setup script. This will download the three VM images we need (router7, debian, alpine) and install the QEMU hypervisor.\n./setup.sh\nWait for the script to finish downloading and setting everything up.","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#booting-the-network","href":"labs/mini-cloud.html#booting-the-network","title":"Operating System (2025 Fall)","section":"Booting the Network","text":"Booting the Network\nOur mini-cloud uses the router7 router to connect everything. The router7 image is a cool, lightweight Linux system running a custom router program written in Go.\nLet’s boot it up!\n./run-router7.sh\nWhen the OS boots, you will see a bunch of messages. Wait one minute and just press Enter to get a command prompt.\nNow, let’s inspect the router’s network interfaces.\nip a\nDo you see uplink0 and lan0? A real-world home router usually has one “WAN” or “Internet” port (the uplink) and several “LAN” ports for your home devices (the downlinks).\n\nOne important job of an operating system is to manage I/O device. Each of the network interface is an I/O device.\n\n\nThe router7 image comes from the QEMU Advent Calendar 2023, which has tons of other fun and quirky VM images. Feel free to explore them on your own time!","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#launching-your-servers","href":"labs/mini-cloud.html#launching-your-servers","title":"Operating System (2025 Fall)","section":"Launching Your Servers","text":"Launching Your Servers\nNow that the router is running, let’s launch our two “server” VMs: a Debian VM and an Alpine Linux VM. Both runs the Linux kernel, but Alpine is very small and lightweight.\nFirst, open a new terminal in VS Code. You can do this by clicking the + icon in the terminal panel.\nIn this second terminal, run the Debian VM:\n./run-debian.sh\nWhen prompted for a login, use these credentials:\n\nusername: root\npassword: root\n\nNext, open a third terminal (click the + again) and run the Alpine VM:\n./run-alpine.sh\nLog in with the same credentials:\n\nusername: root\npassword: root\n\nYou should now have three terminals running: one for the router, one for Debian, and one for Alpine.","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#making-connections","href":"labs/mini-cloud.html#making-connections","title":"Operating System (2025 Fall)","section":"Making Connections","text":"Making Connections\nLet’s see if our machines can talk to each other.\n\nFind Debian’s IP Address: In the Debian VM terminal, run ip a to find its IP address. It will likely be something like 10.254.0.203.\nConnect from Alpine to Debian: Now, switch to the Alpine VM terminal. We’ll try to log in to the Debian machine using SSH. Replace [ip address of debian] with the actual IP you found in the previous step.\n\nssh root@[ip address of debian]\nssh is how you will connect to servers everywhere. See MIT’s explanation.","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#checking-the-routers-records","href":"labs/mini-cloud.html#checking-the-routers-records","title":"Operating System (2025 Fall)","section":"Checking the Router’s Records","text":"Checking the Router’s Records\nHow did your Alpine and Debian VMs get their IP addresses? The router runs a DHCP server that offers IP addresses to OSs that join the network.\nSwitch back to the router7 terminal. The DHCP server’s lease records are stored in a JSON file. Let’s view its contents.\ncat /perm/dhcp4d/leases.json\nYou should see entries for both the Debian and Alpine VMs, listing their MAC addresses and the IP addresses the router assigned to them. Something like this:\n# cat /perm/dhcp4d/leases.json \n[\n        {\n                \"num\": 144,\n                \"addr\": \"10.254.0.146\",\n                \"hardware_addr\": \"52:55:00:aa:00:11\",\n                \"hostname\": \"localhost\",\n                \"hostname_override\": \"\",\n                \"expiry\": \"2025-09-01T23:47:22.401988058-04:00\",\n                \"last_ack\": \"2025-09-01T23:27:22.401993257-04:00\"\n        },\n        {\n                \"num\": 201,\n                \"addr\": \"10.254.0.203\",\n                \"hardware_addr\": \"52:55:00:aa:00:10\",\n                \"hostname\": \"os25\",\n                \"hostname_override\": \"\",\n                \"expiry\": \"2025-09-01T23:42:30.108212438-04:00\",\n                \"last_ack\": \"2025-09-01T23:22:30.108216646-04:00\"\n        }\n]","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#the-magic-of-virtualization","href":"labs/mini-cloud.html#the-magic-of-virtualization","title":"Operating System (2025 Fall)","section":"The Magic of Virtualization","text":"The Magic of Virtualization\nLet’s do one last thing. Open a fourth terminal in VS Code. This terminal is for the host Codespace environment, not one of our VMs.\nRun the htop command to see the system’s resource usage.\nhtop\nLook at the the CPU usage bars on top-left corner. Most Codespace instances have only 2 CPUs. Yet, we are running three separate VMs, and if you check their configurations, each might believe it has 2 virtual CPUs (vCPUs) all to itself! We could launch even more!!\nThink about it:\n\nHow is it possible to run so many “virtual CPUs” on a machine with only 2 physical CPU cores?\nWhat do you think would happen to the performance of all the VMs if one of them started running a very CPU-intensive application (like a game)?\n\n\n\n\n\n\n\nOver-subscription\n\n\n\n\n\nPromising more CPUs than you physically have: this is called over-subscription. Over-subscription appears everywhere. This is how Google is able to host more than thousands of Colab container on one single server, but each container thinks he is the only person in the world. This saves company a lot of money.","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#mission-complete","href":"labs/mini-cloud.html#mission-complete","title":"Operating System (2025 Fall)","section":"Mission Complete!","text":"Mission Complete!\nThanks to your help, Niko has successfully completed his first training mission!","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/mini-cloud.html#more-adventures-in-the-os-jungle","href":"labs/mini-cloud.html#more-adventures-in-the-os-jungle","title":"Operating System (2025 Fall)","section":"More Adventures in the OS Jungle","text":"More Adventures in the OS Jungle\nThe OS jungle is big and full of fascinating OSs. Check out the v86 Project.\nThis amazing project is an entire x86 PC emulator written in JavaScript. That means it can boot and run old operating systems directly in your web browser, no server required! (Github Codespace’s VS Code is running on Github cloud, but v86 is truly entirely running on your own computer).\nGo ahead and try booting up some of the classics:\n\nWindows 98\nMS-DOS\nA very old version of Linux (e.g., DSL)\nReactOS (an open-source clone of Windows)","crumbs":["Home","Worksheet 3","Your First Week in OS Journey"]},{"objectID":"labs/process-creation.html","href":"labs/process-creation.html","title":"Operating System (2025 Fall)","section":"","text":"Why the UNIX chose a two-step interface (fork then exec) instead of one single API for process creation?\nThe biggest reason is that the parent can adjust many of the child process’s execution environment:\n\nscheduling priority (nice)\nresource limits (rlimit)\nopen file (dup2)\npermission (umask)\nworking directory (chdir)\nuser ID (setuid)\nsignal handling.\n\nA management process run as root. It forks a child, and drops child’s privileges from root to the nobody user. This will exec() the target binary with minimum security risk.\nIf you have a single API for process creation, you would need to populate a very big struct of options.\nWhen we exec() a program, we can also pass some inputs into the program. There are two ways to pass inputs to the program:\n\ncommand-line arguments (via argv)\nenvironment variables (via envp)\n\nRead OSTEP-proc-5 to find out more!\n\n\nHave you ever run AI tool like this one that needs an API key to talk to OpenAI? It is a bad idea to just write this in the code:\n# inside my python code ...\napi_key = \"sk-ABCDEF123456\"\nWhy? Because if you commit your code to GitHub, people can see your API key 🙃.\nIt is also a bad idea to pass the API key as command line argument like this:\n$ python3 llama.py api=\"sk-ABCDEF123456\"\nWhy? Because if you run the program on a public workstation, anyone on the same workstation can see your secret by looking at top or ps.\nInstead, the best practice is to pass the API key or any secret information as environment variable:\nimport getpass\nimport os\n\nif \"OPENAI_API_KEY\" not in os.environ:\n    os.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"Enter your OpenAI API key: \")\nBefore we run the code, we set the environment variable by pasting the API key we get from OpenAI: export OPENAI_API_KEY=sk-ABCDEF123456 Environment variables let us pass context to the code we’re running without hard-coding it in the code.","crumbs":["Home","Worksheet 3","`fork()`/`exec()`"]},{"objectID":"labs/process-creation.html#forkexec","href":"labs/process-creation.html#forkexec","title":"Operating System (2025 Fall)","section":"","text":"Why the UNIX chose a two-step interface (fork then exec) instead of one single API for process creation?\nThe biggest reason is that the parent can adjust many of the child process’s execution environment:\n\nscheduling priority (nice)\nresource limits (rlimit)\nopen file (dup2)\npermission (umask)\nworking directory (chdir)\nuser ID (setuid)\nsignal handling.\n\nA management process run as root. It forks a child, and drops child’s privileges from root to the nobody user. This will exec() the target binary with minimum security risk.\nIf you have a single API for process creation, you would need to populate a very big struct of options.\nWhen we exec() a program, we can also pass some inputs into the program. There are two ways to pass inputs to the program:\n\ncommand-line arguments (via argv)\nenvironment variables (via envp)\n\nRead OSTEP-proc-5 to find out more!\n\n\nHave you ever run AI tool like this one that needs an API key to talk to OpenAI? It is a bad idea to just write this in the code:\n# inside my python code ...\napi_key = \"sk-ABCDEF123456\"\nWhy? Because if you commit your code to GitHub, people can see your API key 🙃.\nIt is also a bad idea to pass the API key as command line argument like this:\n$ python3 llama.py api=\"sk-ABCDEF123456\"\nWhy? Because if you run the program on a public workstation, anyone on the same workstation can see your secret by looking at top or ps.\nInstead, the best practice is to pass the API key or any secret information as environment variable:\nimport getpass\nimport os\n\nif \"OPENAI_API_KEY\" not in os.environ:\n    os.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"Enter your OpenAI API key: \")\nBefore we run the code, we set the environment variable by pasting the API key we get from OpenAI: export OPENAI_API_KEY=sk-ABCDEF123456 Environment variables let us pass context to the code we’re running without hard-coding it in the code.","crumbs":["Home","Worksheet 3","`fork()`/`exec()`"]},{"objectID":"labs/process-creation.html#try-it-on-github-codespace","href":"labs/process-creation.html#try-it-on-github-codespace","title":"Operating System (2025 Fall)","section":"Try it on Github Codespace","text":"Try it on Github Codespace\nLet’s play with an example script that query Taipei YouBike 2.0 real-time API. Open a previous Github Codespace, and run the following in the terminal to install some packages:\nsudo apt update\nsudo apt install -y jq curl\n\nSave this script as ubike.sh\n\n#!/usr/bin/env bash\n#\n# Simple helper for Taipei YouBike 2.0 real-time data\n#   • If $STATION is unset/empty  : list all station names (sna)\n#   • If $STATION is set          : print the specific field for the matching sna\n\nDATA_URL=\"https://data.taipei/api/v1/dataset/df2da2b6-a3d5-47e7-8c97-8b047d9a2bd1?scope=resourceAquire\"\n\njson=$(curl -s \"$DATA_URL\")\n\nif [[ -z \"${STATION:-}\" ]]; then\n  echo \"Available stations:\"\n  echo \"$json\" | jq -r '.[] | .sna' | sort -u\nelse\n  echo \"Details for station: $STATION\"\n  echo \"$json\" | jq -r --arg sna \"$STATION\" '\n    .[]\n    | select(.sna == $sna)\n    | to_entries[]\n    | \"\\(.key)=\\(.value)\"\n  '\nfi\n\nmake it executable: chmod +x ubike.sh\nRun it:\n\n# List every station name\n./ubike.sh # STATION is empty\n\n# Inspect one specific station (Chinese names work fine)\nexport STATION=\"YouBike2.0_捷運科技大樓站\"\n./ubike.sh\nAs you can see, we just change the behavior of the ubike.sh without passing an argument.\n\nReal-World Example: Starting a PostgreSQL Container\nDocker container images often don’t change once they are built, meaning that their contents (binaries, scripts, configurations) are fixed. Environment variables help us inject dynamic behavior, such as API keys or password, into a container at runtime.\nThe following command launches a PostgreSQL database container. Note the -e flags: they inject environment variables into the container (more customizable variables here).\ndocker run --name some-postgres \\\n  -e POSTGRES_USER=myuser \\\n  -e POSTGRES_PASSWORD=mypassword \\\n  -e POSTGRES_DB=mydatabase \\\n  -d postgres\nUnder the hood, Docker calls execve() to start the database process. The database process reads values like POSTGRES_USER from the environment.\nQuestion: Why not just use command-line arguments: docker run postgres --user=myuser --password=mypassword?","crumbs":["Home","Worksheet 3","`fork()`/`exec()`"]},{"objectID":"labs/process-creation.html#running-programs-in-the-background-daemonize","href":"labs/process-creation.html#running-programs-in-the-background-daemonize","title":"Operating System (2025 Fall)","section":"Running Programs in the Background: Daemonize","text":"Running Programs in the Background: Daemonize\nYou ssh into a Linux server, start a long-running program (say ./my_model_training), and then your network drops or you log out. Your probably know that the program will get killed….\nHow to keep it alive? We usually use tmux and detach. But the classic UNIX way is to daemonize: turn your program into a background service that is no longer tied to your terminal.\n\nHow PTT Did It (The Old Days)\nIn the 1990s, PTT was run at 杜奕瑾’s dormitory, manually from a terminal. To keep the program running, PTT called a daemonize() function from logind, which can handle thousands of log-ins per second. The daemonize() function works like this:\n\nfork() → parent exits, child keeps running in the background.\nsetsid() → child starts a new “session” with no terminal attached.\nfork() again (double fork) → ensures the process can never accidentally grab a terminal again.\nredirect input/output → stdin/stdout/stderr go to /dev/null or log files.\nwrite a PID file → so admins can later find and control the daemon.\n\nThat’s why even if the admin logged out, PTT kept running\nHere’s the specific code that redirect stderr to logfile. A daemon has no screen, so we send errors into a file.\nif (logfile) {\n    if ((fd = OpenCreate(logfile, O_WRONLY | O_APPEND)) &lt; 0) {\n        perror(\"Can't open logfile\");\n        exit(1);\n    }\n    if (fd != 2) {\n        dup2(fd, 2);\n        close(fd);\n    }\n}\nHere’s the code that sends stdin and stdout to black hole\nif ((fd = open(\"/dev/null\", O_RDWR)) &lt; 0) {\n    perror(\"Can't open /dev/null\");\n    exit(1);\n}\n\ndup2(fd, 0);\ndup2(fd, 1);\nif (!logfile)\n    dup2(fd, 2);\nThis is equivalent to running this in a shell:\n$ ./ptt &lt;/dev/null &gt;/dev/null 2&gt;&gt;\"$logfile\"\n\n\nToday: systemd Instead of DIY\nOn modern Linux servers, you rarely write daemonize() yourself. Instead, you write a systemd service unit:\n[Service]\nExecStart=/usr/local/bin/myapp\nEnvironment=\"API_KEY=sk-XXX\"\nRestart=always\nSystemd then:\n\nstarts your program in the background,\nkeeps it alive if it crashes,\ncapture error logs (so you can debug later),\ninjects environment variables.\n\n\nDid you see systemd being the ancestor of all the processes in the system? These processes like databases, web servers, or messaging systems. They run for months, listening on a network port and responding to requests. If they ever crash, they must be restarted immediately to keep the system available.","crumbs":["Home","Worksheet 3","`fork()`/`exec()`"]},{"objectID":"weeks/w1.html","href":"weeks/w1.html","title":"Operating System (2025 Fall)","section":"","text":"Only Taiwanese knows this joke …\nOperating Systems are everywhile in our life. But what is an OS?\nAn operating system (OS) is like the government of a computer. It manages the hardware resources: CPU time, memory, storage. OS must fairly allocate resources to programs, just like a government ensures water, electricity, and roads are shared between factories and citizens.\nOur textbook, Operating Systems: Three Easy Pieces (OSTEP), explains that the OS has three fundamental tasks:\n\nVirtualization: the book asks us: we only have one CPU, how can we run four programs at the same time? The OS creates the illusion that everyone has its own private CPU. For DRAM, the OS creates an illusion that each program has its own private memory. Think about it: when you write a Python program, do you need to know how many other programs will be running in the computer you will run on? Your Python will run just fine whether there are two or twenty other programs running on the same computer, using the same CPU, using the same memory. But, that means, the OS must switch between these programs. But how does the OS switch among them without us noticing it? That’s the magic of virtualization.\n\nConcurrency: We often need to split a big job and run them in parallel on multiple CPUs. This will reduce the finishing time. But what happens when multiple programs running on different CPUs must touch the same data? It can conflict. The OS provides us tools to ensure that concurrent operations don’t lead to conflicts.\nPersistence: Your data needs to survive even when the power is turned off. The OS manages this through the file system. It provides a standard interface for programs to store and get data. You don’t need to know whether your data lives on a hard drive or an SSD."},{"objectID":"weeks/w1.html#whats-the-os-in-your-mind-內心的os","href":"weeks/w1.html#whats-the-os-in-your-mind-內心的os","title":"Operating System (2025 Fall)","section":"","text":"Only Taiwanese knows this joke …\nOperating Systems are everywhile in our life. But what is an OS?\nAn operating system (OS) is like the government of a computer. It manages the hardware resources: CPU time, memory, storage. OS must fairly allocate resources to programs, just like a government ensures water, electricity, and roads are shared between factories and citizens.\nOur textbook, Operating Systems: Three Easy Pieces (OSTEP), explains that the OS has three fundamental tasks:\n\nVirtualization: the book asks us: we only have one CPU, how can we run four programs at the same time? The OS creates the illusion that everyone has its own private CPU. For DRAM, the OS creates an illusion that each program has its own private memory. Think about it: when you write a Python program, do you need to know how many other programs will be running in the computer you will run on? Your Python will run just fine whether there are two or twenty other programs running on the same computer, using the same CPU, using the same memory. But, that means, the OS must switch between these programs. But how does the OS switch among them without us noticing it? That’s the magic of virtualization.\n\nConcurrency: We often need to split a big job and run them in parallel on multiple CPUs. This will reduce the finishing time. But what happens when multiple programs running on different CPUs must touch the same data? It can conflict. The OS provides us tools to ensure that concurrent operations don’t lead to conflicts.\nPersistence: Your data needs to survive even when the power is turned off. The OS manages this through the file system. It provides a standard interface for programs to store and get data. You don’t need to know whether your data lives on a hard drive or an SSD."},{"objectID":"weeks/w1.html#os-security","href":"weeks/w1.html#os-security","title":"Operating System (2025 Fall)","section":"OS Security","text":"OS Security\n\n Why do you have to wait a few seconds after pressing the button on a YouBike before you can ride away? Because you’re waiting for a tiny computer to boot up its operating system, start the drivers for the 4G modem and the NFC card reader, and get ready to talk to the Youbike’s cloud server. Without those drivers, an user program cannot tell the 4G and NFC hardware to do things. The OS also makes sure if some kids try to misuse Youbike, they see something like this:\n\nBut what happens when there is bug or virus in the driver?\n\n\nFunny news:\n\nTainan Billboard Crash (in Chinese)\n\nTaipei Metro still on Windows XP? (in Chinese)\nWhy the world’s ATMs ran on Windows XP (in Chinese)\n\nDo you know what operating system runs on the entertainment system on a typical airplane? Android! Most of the world’s in-flight entertainment systems are developed by a company called Panasonic Avionics. Yes, the same OS that might be on your phone. Some airplane lets the passenger online chats with each other, security researchers have found vulnerabilities in these systems that make it possible to do some funny things.\n\n\nFunny things on airplane:\n\nIn-Flight Hacking System\n\nFunny things (don’t do it)\n\n Nintendo doesn’t run Windows or Linux on the Switch. They build their own OS that is very tough to prevent hackers from pirating games."},{"objectID":"weeks/w1.html#patch-and-update","href":"weeks/w1.html#patch-and-update","title":"Operating System (2025 Fall)","section":"Patch and update","text":"Patch and update\nOS has bugs, bugs are fixed by patch, patch is applied through security updates. Typically, OS has to be rebooted after a security update. This could be problematic in many situations. There are many systems that must run non-stop for years. For example, a nuclear plant can’t be shut down to apply OS security update to its software. Don’t be surprised if nuclear plant still run IBM mainframe from the 1980s.\n\n2024 CrowdStrike Nightmare\n8.5 million systems running Windows crash into blue screen on July 19, 2024 due to a security update.\nGlobal damage: 5078 air flights, 4.6% of those scheduled that day, were cancelled.\nWikipedia: \n\nOn 19 July at 04:09 UTC, CrowdStrike distributed a faulty configuration update for its Falcon sensor software running on Windows PCs and servers. A modification to a configuration file which was responsible for screening named pipes, Channel File 291, caused an out-of-bounds memory read in the Windows sensor client that resulted in an invalid page fault. The update caused machines to either enter into a bootloop or boot into recovery mode.\nAlmost immediately, Windows virtual machines on the Microsoft Azure cloud platform began rebooting and crashing, and at 06:48 UTC, Google Compute Engine also reported the problem.\n\nHow to fix?\n\nAffected machines could be restored by rebooting while connected to the network; ideally while connected to Ethernet, thus providing the opportunity to download the reverted channel file, with multiple reboots reportedly required.\n\n\n\n\n\n\n\nSecurity v.s Availability\n\n\n\n\n\nAvailability measures how long a service remains functional. Availability is important for e-commerce platforms like PChome, which lose a lot of money if customers cannot access the website even for a few minutes. Major websites strive to keep their downtime within minutes per year (downtime status statistics)\nMany companies accept delayed security updates to avoid risks like unexpected service disruptions. However, this trade-off can be dangerous. In 2017, the WannaCry attack caused chaos globally. In 2018, TSMC was attacked by WannaCry and lost billions of NTD. TSMC was attacked because it had not applied the security patches Microsoft released after the initial outbreak in 2017.\n\n\n\nOn Linux, we use “kernel panic” to refer to an OS crash. What is the manual fix most people use to fix a kernel panic? Press the button to reboot.\nWhy would a reboot usually fix everything??"},{"objectID":"weeks/w1.html#iphone-runs-5-oss","href":"weeks/w1.html#iphone-runs-5-oss","title":"Operating System (2025 Fall)","section":"iPhone Runs >5 OSs!","text":"iPhone Runs &gt;5 OSs!\nYou think your iPhone runs just iOS? No. iOS talks to other OSs running in specialized chips in iPhone. Here are some of them:\n\n\nsepOS: Your Face ID and fingerprint data are not managed by iOS. They’re handled by a co-processor called the Secure Enclave, which runs its own microkernel OS based on L4. Its only job is to keep your secrets.\n\nJava Card OS: When you use Apple Pay, the transaction happens on a chip called the Secure Element (SE), which runs its own tiny, high-security OS. iOS just tells it when to wake up.\n\nQuRT: The cellular modem, the chip that connects you to the 4G network, runs its own OS. On recent iPhones with Qualcomm chips, it runs a real-time OS called QuRT. Airpods and Apple Pencil also run this OS.\nRTKit: The tiny, low-power “Always-On Processor” that listens for “Hey Siri” and tracks sensor data runs yet another real-time OS called RTKit.\n\nWhy does Apple split the iPhone into so many specialized operating systems instead of letting iOS handle everything?\nFrom a security standpoint, each subsystem runs on its own tiny OS because if one part is hacked, another is still secure. Even if iOS gets hacked, your credit card is still safe.\nFrom a power perspective, the processor that listens for “Hey Siri” needs to draw energy even if the phone is sleeping. Running a small OS means that iOS doesn’t need to stay awake, and your battery will last longer."},{"objectID":"weeks/w1.html#many-requirements","href":"weeks/w1.html#many-requirements","title":"Operating System (2025 Fall)","section":"Many requirements","text":"Many requirements\nSo, back to our Taiwanese saying: “what’s the OS in your mind?” What do you want from an OS? Can be many, and it depends.\n\nBoot Time: An OS can boot up under 4 millisecond. The OS in your Airpod can boot up boot up under 1 second. But a server might take 10 minutes to boot, and that’s perfectly fine.\n\nUptime: You probably reboot your laptop every few days for an update. When I was a student admin for the NTU CS workstations, we had servers that ran continuously for months without stopping. There can be hundreds of students compiling code, and some would inevitably write programs that tried to eat all the memory. We couldn’t just reboot the machine. The OS must control the damage from a single user without affecting anyone else. You don’t need that on your PC.\n\nScale: Your laptop might have 8~16 CPU cores. A big server in Google’s data center can have over 200 cores and 2 Terabytes of RAM. Its CPUs even run at a slower clock speed than your laptop’s! Why? Because its OS is optimized for throughput (handling thousands of Google Colab users at once), not latency (making one user’s mouse feel quick).\nPower: How does a Huawei GT Pro smartwatch last for two weeks without charging, while an Apple Watch lasts no more than one day? It has a lot to do with the OS.\n\nThe amazing thing is that the same Linux kernel can be configured to run in all these different scenarios. Huawei runs the same OS, HarmonyOS, in smartphone, in router, and in a car.\nWe’ll learn how the OS performs its magic tricks, from scheduling processes on the CPU to managing memory. Welcome to the world of Operating Systems."},{"objectID":"weeks/w1.html#food-for-thought","href":"weeks/w1.html#food-for-thought","title":"Operating System (2025 Fall)","section":"Food for thought","text":"Food for thought\n\nYour iPhone contains at least five different operating systems. Does this make the phone more secure or less secure? Why?\n\nOS design has many trade-offs (e.g., performance vs. power vs. security). If you were designing an OS for a self-driving car, how would you prioritize? What about for a social media app’s server?\n\nATMs and metro systems often must operate for 30+ years. Many of them run on very old, unsupported operating systems. What does this tell us about the real-world challenges of security and system administration?\n\nIf the OS is a “government,” what happens when different programs or users have conflicting needs? How can the OS be “fair” to everyone?"},{"objectID":"weeks/w1.html#get-familiarized-with-linux","href":"weeks/w1.html#get-familiarized-with-linux","title":"Operating System (2025 Fall)","section":"Get Familiarized with Linux","text":"Get Familiarized with Linux\nMIT offers an excellent course, The Missing Semester of Your CS Education, to familiarize you with the terminal interface. Please take the first course to play around with the shell. You’re encouraged to browse their other courses if time allows.\nUse Github Codespace as a place to get a Linux environment without installing one.\n\nCreate a Github Account if you don’t have\nSet a 10-minute timeout for Github Codespace. This prevents you from running out of your quota too soon.\nClick the button below and click “Create Codespace”. This will open a web-based VS Code devcontainer on Github.\n\n.\nIt might take a minute or two for the Codespace to build. Once you see a VS Code interface with a terminal at the bottom, you’re ready to go."},{"objectID":"weeks/w2.html","href":"weeks/w2.html","title":"Operating System (2025 Fall)","section":"","text":"Only Taiwanese knows this joke …\nOperating Systems are everywhile in our life. But what is an OS?\nAn operating system (OS) is like the government of a computer. It manages the hardware resources: CPU time, memory, storage. OS must fairly allocate resources to programs, just like a government ensures water, electricity, and roads are shared between factories and citizens.\nOur textbook, Operating Systems: Three Easy Pieces (OSTEP), explains that the OS has three fundamental tasks:\n\nVirtualization: the book asks us: we only have one CPU, how can we run four programs at the same time? The OS creates the illusion that everyone has its own private CPU. For DRAM, the OS creates an illusion that each program has its own private memory. Think about it: when you write a Python program, do you need to know how many other programs will be running in the computer you will run on? Your Python will run just fine whether there are two or twenty other programs running on the same computer, using the same CPU, using the same memory. But, that means, the OS must switch between these programs. But how does the OS switch among them without us noticing it? That’s the magic of virtualization.\n\nConcurrency: We often need to split a big job and run them in parallel on multiple CPUs. This will reduce the finishing time. But what happens when multiple programs running on different CPUs must touch the same data? It can conflict. The OS provides us tools to ensure that concurrent operations don’t lead to conflicts.\nPersistence: Your data needs to survive even when the power is turned off. The OS manages this through the file system. It provides a standard interface for programs to store and get data. You don’t need to know whether your data lives on a hard drive or an SSD.","crumbs":["Home","Worksheet 2"]},{"objectID":"weeks/w2.html#whats-the-os-in-your-mind-內心的os","href":"weeks/w2.html#whats-the-os-in-your-mind-內心的os","title":"Operating System (2025 Fall)","section":"","text":"Only Taiwanese knows this joke …\nOperating Systems are everywhile in our life. But what is an OS?\nAn operating system (OS) is like the government of a computer. It manages the hardware resources: CPU time, memory, storage. OS must fairly allocate resources to programs, just like a government ensures water, electricity, and roads are shared between factories and citizens.\nOur textbook, Operating Systems: Three Easy Pieces (OSTEP), explains that the OS has three fundamental tasks:\n\nVirtualization: the book asks us: we only have one CPU, how can we run four programs at the same time? The OS creates the illusion that everyone has its own private CPU. For DRAM, the OS creates an illusion that each program has its own private memory. Think about it: when you write a Python program, do you need to know how many other programs will be running in the computer you will run on? Your Python will run just fine whether there are two or twenty other programs running on the same computer, using the same CPU, using the same memory. But, that means, the OS must switch between these programs. But how does the OS switch among them without us noticing it? That’s the magic of virtualization.\n\nConcurrency: We often need to split a big job and run them in parallel on multiple CPUs. This will reduce the finishing time. But what happens when multiple programs running on different CPUs must touch the same data? It can conflict. The OS provides us tools to ensure that concurrent operations don’t lead to conflicts.\nPersistence: Your data needs to survive even when the power is turned off. The OS manages this through the file system. It provides a standard interface for programs to store and get data. You don’t need to know whether your data lives on a hard drive or an SSD.","crumbs":["Home","Worksheet 2"]},{"objectID":"weeks/w2.html#os-security","href":"weeks/w2.html#os-security","title":"Operating System (2025 Fall)","section":"OS Security","text":"OS Security\n\n Why do you have to wait a few seconds after pressing the button on a YouBike before you can ride away? Because you’re waiting for a tiny computer to boot up its operating system, start the drivers for the 4G modem and the NFC card reader, and get ready to talk to the Youbike’s cloud server. Without those drivers, an user program cannot tell the 4G and NFC hardware to do things. The OS also makes sure if some kids try to misuse Youbike, they see something like this:\n\nBut what happens when there is bug or virus in the driver?\n\n\nFunny news:\n\nTainan Billboard Crash (in Chinese)\n\nTaipei Metro still on Windows XP? (in Chinese)\nWhy the world’s ATMs ran on Windows XP (in Chinese)\n\nDo you know what operating system runs on the entertainment system on a typical airplane? Android! Most of the world’s in-flight entertainment systems are developed by a company called Panasonic Avionics. Yes, the same OS that might be on your phone. Some airplane lets the passenger online chats with each other, security researchers have found vulnerabilities in these systems that make it possible to do some funny things.\n\n\nFunny things on airplane:\n\nIn-Flight Hacking System\n\nFunny things (don’t do it)\n\n Nintendo doesn’t run Windows or Linux on the Switch. They build their own OS that is very tough to prevent hackers from pirating games.","crumbs":["Home","Worksheet 2"]},{"objectID":"weeks/w2.html#patch-and-update","href":"weeks/w2.html#patch-and-update","title":"Operating System (2025 Fall)","section":"Patch and update","text":"Patch and update\nOS has bugs, bugs are fixed by patch, patch is applied through security updates. Typically, OS has to be rebooted after a security update. This could be problematic in many situations. There are many systems that must run non-stop for years. For example, a nuclear plant can’t be shut down to apply OS security update to its software. Don’t be surprised if nuclear plant still run IBM mainframe from the 1980s.\n\n2024 CrowdStrike Nightmare\n8.5 million systems running Windows crash into blue screen on July 19, 2024 due to a security update.\nGlobal damage: 5078 air flights, 4.6% of those scheduled that day, were cancelled.\nWikipedia: \n\nOn 19 July at 04:09 UTC, CrowdStrike distributed a faulty configuration update for its Falcon sensor software running on Windows PCs and servers. A modification to a configuration file which was responsible for screening named pipes, Channel File 291, caused an out-of-bounds memory read in the Windows sensor client that resulted in an invalid page fault. The update caused machines to either enter into a bootloop or boot into recovery mode.\nAlmost immediately, Windows virtual machines on the Microsoft Azure cloud platform began rebooting and crashing, and at 06:48 UTC, Google Compute Engine also reported the problem.\n\nHow to fix?\n\nAffected machines could be restored by rebooting while connected to the network; ideally while connected to Ethernet, thus providing the opportunity to download the reverted channel file, with multiple reboots reportedly required.\n\n\n\n\n\n\n\nSecurity v.s Availability\n\n\n\n\n\nAvailability measures how long a service remains functional. Availability is important for e-commerce platforms like PChome, which lose a lot of money if customers cannot access the website even for a few minutes. Major websites strive to keep their downtime within minutes per year (downtime status statistics)\nMany companies accept delayed security updates to avoid risks like unexpected service disruptions. However, this trade-off can be dangerous. In 2017, the WannaCry attack caused chaos globally. In 2018, TSMC was attacked by WannaCry and lost billions of NTD. TSMC was attacked because it had not applied the security patches Microsoft released after the initial outbreak in 2017.\n\n\n\nOn Linux, we use “kernel panic” to refer to an OS crash. What is the manual fix most people use to fix a kernel panic? Press the button to reboot.\nWhy would a reboot usually fix everything??","crumbs":["Home","Worksheet 2"]},{"objectID":"weeks/w2.html#iphone-runs-5-oss","href":"weeks/w2.html#iphone-runs-5-oss","title":"Operating System (2025 Fall)","section":"iPhone Runs >5 OSs!","text":"iPhone Runs &gt;5 OSs!\nYou think your iPhone runs just iOS? No. iOS talks to other OSs running in specialized chips in iPhone. Here are some of them:\n\n\nsepOS: Your Face ID and fingerprint data are not managed by iOS. They’re handled by a co-processor called the Secure Enclave, which runs its own microkernel OS based on L4. Its only job is to keep your secrets.\n\nJava Card OS: When you use Apple Pay, the transaction happens on a chip called the Secure Element (SE), which runs its own tiny, high-security OS. iOS just tells it when to wake up.\n\nQuRT: The cellular modem, the chip that connects you to the 4G network, runs its own OS. On recent iPhones with Qualcomm chips, it runs a real-time OS called QuRT. Airpods and Apple Pencil also run this OS.\nRTKit: The tiny, low-power “Always-On Processor” that listens for “Hey Siri” and tracks sensor data runs yet another real-time OS called RTKit.\n\nWhy does Apple split the iPhone into so many specialized operating systems instead of letting iOS handle everything?\nFrom a security standpoint, each subsystem runs on its own tiny OS because if one part is hacked, another is still secure. Even if iOS gets hacked, your credit card is still safe.\nFrom a power perspective, the processor that listens for “Hey Siri” needs to draw energy even if the phone is sleeping. Running a small OS means that iOS doesn’t need to stay awake, and your battery will last longer.","crumbs":["Home","Worksheet 2"]},{"objectID":"weeks/w2.html#many-requirements","href":"weeks/w2.html#many-requirements","title":"Operating System (2025 Fall)","section":"Many requirements","text":"Many requirements\nSo, back to our Taiwanese saying: “what’s the OS in your mind?” What do you want from an OS? Can be many, and it depends.\n\nBoot Time: An OS can boot up under 4 millisecond. The OS in your Airpod can boot up boot up under 1 second. But a server might take 10 minutes to boot, and that’s perfectly fine.\n\nUptime: You probably reboot your laptop every few days for an update. When I was a student admin for the NTU CS workstations, we had servers that ran continuously for months without stopping. There can be hundreds of students compiling code, and some would inevitably write programs that tried to eat all the memory. We couldn’t just reboot the machine. The OS must control the damage from a single user without affecting anyone else. You don’t need that on your PC.\n\nScale: Your laptop might have 8~16 CPU cores. A big server in Google’s data center can have over 200 cores and 2 Terabytes of RAM. Its CPUs even run at a slower clock speed than your laptop’s! Why? Because its OS is optimized for throughput (handling thousands of Google Colab users at once), not latency (making one user’s mouse feel quick).\nPower: How does a Huawei GT Pro smartwatch last for two weeks without charging, while an Apple Watch lasts no more than one day? It has a lot to do with the OS.\n\nThe amazing thing is that the same Linux kernel can be configured to run in all these different scenarios. Huawei runs the same OS, HarmonyOS, in smartphone, in router, and in a car.\nWe’ll learn how the OS performs its magic tricks, from scheduling processes on the CPU to managing memory. Welcome to the world of Operating Systems.","crumbs":["Home","Worksheet 2"]},{"objectID":"weeks/w2.html#food-for-thought","href":"weeks/w2.html#food-for-thought","title":"Operating System (2025 Fall)","section":"Food for thought","text":"Food for thought\n\nYour iPhone contains at least five different operating systems. Does this make the phone more secure or less secure? Why?\n\nOS design has many trade-offs (e.g., performance vs. power vs. security). If you were designing an OS for a self-driving car, how would you prioritize? What about for a social media app’s server?\n\nATMs and metro systems often must operate for 30+ years. Many of them run on very old, unsupported operating systems. What does this tell us about the real-world challenges of security and system administration?\n\nIf the OS is a “government,” what happens when different programs or users have conflicting needs? How can the OS be “fair” to everyone?","crumbs":["Home","Worksheet 2"]},{"objectID":"weeks/w2.html#get-familiarized-with-linux","href":"weeks/w2.html#get-familiarized-with-linux","title":"Operating System (2025 Fall)","section":"Get Familiarized with Linux","text":"Get Familiarized with Linux\nMIT offers an excellent course, The Missing Semester of Your CS Education, to familiarize you with the terminal interface. Please take the first course to play around with the shell. You’re encouraged to browse their other courses if time allows.\nUse Github Codespace as a place to get a Linux environment without installing one.\n\nCreate a Github Account if you don’t have\nSet a 10-minute timeout for Github Codespace. This prevents you from running out of your quota too soon.\nClick the button below and click “Create Codespace”. This will open a web-based VS Code devcontainer on Github.\n\n.\nIt might take a minute or two for the Codespace to build. Once you see a VS Code interface with a terminal at the bottom, you’re ready to go.","crumbs":["Home","Worksheet 2"]},{"objectID":"handouts/unix.html","href":"handouts/unix.html","title":"Unix Philosophy","section":"","text":"Imagine it’s the early 2000s. You’re an engineer at TSMC’s ICSD, responsible for maintaining hundreds of Microsoft Windows servers. At 3 AM, you’re urgently called to Fab2: some servers are down, and you suspect the server room’s air conditioner has failed. But which server? Which room? How do you check temperatures across hundreds of machines?\nThese are not your home PCs with graphical interfaces. Doing this manually would mean the nightmare of 500 mouse-clicking through GUI tools. Now imagine running a single command to log into all 500 servers, get their temperatures (with cat 🐱), and identify the hottest machines:\nfor i in server{1..500}; do  \n    echo -n \"$i: \";  \n    ssh $i \"cat /sys/class/thermal/thermal_zone0/temp\";  \ndone | sort -n -k2 | tail -n2  \n\n\nLearn these tools! Will change your life! Check out MIT Missing Semester: Shell Tools\nThis script shows two important Unix philosophies:\n\nEverything is a file\n\nMake each program do one thing well and let them work together\n\nRead: 3.2.1 Do one thing well (Lampson 2021)\n\n\n\nYou might have seen Windows’s cmd.exe dark window, but anyone who has tried to program anything on it know that it’s like writing Tensorflow Python code in Notepad. But this is the fate of Windows ITs for a long time.\n\n\nTSMC has modernized their IT to use Linux and Kubernetes.\nBefore PowerShell, Microsoft’s product strategy is to offer every possible functionality the user could need as a GUI tool, built by Microsoft engineers. Scripting is available in Unix only: user can quickly assemble a desired program using many single-purpose binaries.\nFortunately, this has changed with in the mid-2000s through the creation of PowerShell. When Microsoft engineer Jeffrey Snover developed PowerShell in mid-2000s, his boss questioned why Windows needed a command-line tool when the company has so many amazing GUI tools. Snover argued that enterprise automation required scripting, not mouse clicks. He turned out to be right: PowerShell is critical to Microsoft’s founding of Azure in the 2010s, now one of the biggest cloud on earth.\n\n\nSource: Corecursive Podcast: Building PowerShell\nBut there is still a deep assumption in PowerShell. It assumes that everything passing around is a .NET object. However, Unix has a different philosophy:\n\nWrite programs to handle text streams, because that is a universal interface. - Peter H. Salus\n\nIn other words, PowerShell assumes structured API for IPC where bash/pipe pass around unstructured text.\n\n\n\nAn UNIX operating system tries to present many of its internal states and connected devices through the same basic interface that you use to read a text document.\n\nHardware sensors (like CPU temperature) become readable files\n\nRunning processes appear as virtual files in /proc\n\nDisks are listed in /dev\n\n# Read CPU temperature  \ncat /sys/class/thermal/thermal_zone0/temp  \n\n# Discard output to a black hole  \necho \"Junk data\" &gt; /dev/null  \n\n# You can change directory to here and see what's going on in your system\ncd /proc\n# How much memory I have?\ncat /proc/meminfo | grep \"MemFree\"  \nThis abstraction lets you use simple tools (cat, grep, sort) to debug complex systems on the fly.\nEverything is a file: a beautiful explanation\n\n\n\ncat /dev/urandom | tr -dc A-Za-z0-9 | head -c 32\nTry this on Github Codespace. A URL will be automated generated, click that.\nsudo apt install netcat-bsd\nwhile true; do { echo -ne \"HTTP/1.1 200 OK\\r\\n\\r\\n\"; ps aux; } | nc -l -p 8080; done","crumbs":["Home","Worksheet 2","Unix Philosophy"]},{"objectID":"handouts/unix.html#am-at-tsmc-fab2","href":"handouts/unix.html#am-at-tsmc-fab2","title":"Unix Philosophy","section":"","text":"Imagine it’s the early 2000s. You’re an engineer at TSMC’s ICSD, responsible for maintaining hundreds of Microsoft Windows servers. At 3 AM, you’re urgently called to Fab2: some servers are down, and you suspect the server room’s air conditioner has failed. But which server? Which room? How do you check temperatures across hundreds of machines?\nThese are not your home PCs with graphical interfaces. Doing this manually would mean the nightmare of 500 mouse-clicking through GUI tools. Now imagine running a single command to log into all 500 servers, get their temperatures (with cat 🐱), and identify the hottest machines:\nfor i in server{1..500}; do  \n    echo -n \"$i: \";  \n    ssh $i \"cat /sys/class/thermal/thermal_zone0/temp\";  \ndone | sort -n -k2 | tail -n2  \n\n\nLearn these tools! Will change your life! Check out MIT Missing Semester: Shell Tools\nThis script shows two important Unix philosophies:\n\nEverything is a file\n\nMake each program do one thing well and let them work together\n\nRead: 3.2.1 Do one thing well (Lampson 2021)","crumbs":["Home","Worksheet 2","Unix Philosophy"]},{"objectID":"handouts/unix.html#the-windows-dilemma","href":"handouts/unix.html#the-windows-dilemma","title":"Unix Philosophy","section":"","text":"You might have seen Windows’s cmd.exe dark window, but anyone who has tried to program anything on it know that it’s like writing Tensorflow Python code in Notepad. But this is the fate of Windows ITs for a long time.\n\n\nTSMC has modernized their IT to use Linux and Kubernetes.\nBefore PowerShell, Microsoft’s product strategy is to offer every possible functionality the user could need as a GUI tool, built by Microsoft engineers. Scripting is available in Unix only: user can quickly assemble a desired program using many single-purpose binaries.\nFortunately, this has changed with in the mid-2000s through the creation of PowerShell. When Microsoft engineer Jeffrey Snover developed PowerShell in mid-2000s, his boss questioned why Windows needed a command-line tool when the company has so many amazing GUI tools. Snover argued that enterprise automation required scripting, not mouse clicks. He turned out to be right: PowerShell is critical to Microsoft’s founding of Azure in the 2010s, now one of the biggest cloud on earth.\n\n\nSource: Corecursive Podcast: Building PowerShell\nBut there is still a deep assumption in PowerShell. It assumes that everything passing around is a .NET object. However, Unix has a different philosophy:\n\nWrite programs to handle text streams, because that is a universal interface. - Peter H. Salus\n\nIn other words, PowerShell assumes structured API for IPC where bash/pipe pass around unstructured text.","crumbs":["Home","Worksheet 2","Unix Philosophy"]},{"objectID":"handouts/unix.html#everything-is-a-file","href":"handouts/unix.html#everything-is-a-file","title":"Unix Philosophy","section":"","text":"An UNIX operating system tries to present many of its internal states and connected devices through the same basic interface that you use to read a text document.\n\nHardware sensors (like CPU temperature) become readable files\n\nRunning processes appear as virtual files in /proc\n\nDisks are listed in /dev\n\n# Read CPU temperature  \ncat /sys/class/thermal/thermal_zone0/temp  \n\n# Discard output to a black hole  \necho \"Junk data\" &gt; /dev/null  \n\n# You can change directory to here and see what's going on in your system\ncd /proc\n# How much memory I have?\ncat /proc/meminfo | grep \"MemFree\"  \nThis abstraction lets you use simple tools (cat, grep, sort) to debug complex systems on the fly.\nEverything is a file: a beautiful explanation","crumbs":["Home","Worksheet 2","Unix Philosophy"]},{"objectID":"handouts/unix.html#examples-of-linux-one-liner","href":"handouts/unix.html#examples-of-linux-one-liner","title":"Unix Philosophy","section":"","text":"cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 32\nTry this on Github Codespace. A URL will be automated generated, click that.\nsudo apt install netcat-bsd\nwhile true; do { echo -ne \"HTTP/1.1 200 OK\\r\\n\\r\\n\"; ps aux; } | nc -l -p 8080; done","crumbs":["Home","Worksheet 2","Unix Philosophy"]},{"objectID":"admin/policies.html","href":"admin/policies.html","title":"Course Policies","section":"","text":"The instructor reserves the right to change the syllabus at any time. You will be notified of any changes.\nThe instructor will teach primarily by Flipped Classroom through video lectures, but, there will still be in-person lectures except on dates marked as No class and Office Hour. In-person lectures will not be recorded.\n\n\n\nThis course uses worksheet to guide your learning journey. A new worksheet will be announced each Wednesday at 17:00. This worksheet includes required videos, textbook readings, and a hands-on lab. Please work through this material independently, and discuss any problems you encounter with your teammates (three people per team).\n\nAs you work, collaborate on a shared HackMD document for your team’s learning notes. The hands-on lab contains several reflection questions (marked Q1, Q2, etc.). Write your answers in the HackMD document.\nWe also encourage you to explore beyond the required content by asking your own questions and documenting your discoveries. We call this a shio (short for Shio Dan Ji Lie). Details on Shio Dan Ji Lie\nPlease use the course’s official HackMD Report Template for your notes.\n\n\n\n\n\n\nStructure of Weekly Notes\n\n\n\n\n\nPlease structure your team’s shared HackMD notes as follows:\n\nVideo/Textbook: Shared Notes\nVideo/Textbook: Shio (Explorations & Discoveries)\nHands-on Lab: Answers to Reflection Questions\nHands-on Lab: Shio (Explorations & Discoveries)\nHands-on Lab: Key Takeaways & What I Learned\n\n\n\n\n\n\n\n\n\n\nSubmitting the Weekly Notes\n\n\n\n\n\nSubmit the link to your team’s HackMD document to eLearn by the following Wednesday at 17:00. Please ensure the link allow visitors to edit, but don’t publish it.\nThe TAs will review every submission, leave comments, and select outstanding notes, insightful reflections, and excellent shio explorations to share with the class on Discord. You may continue to add content to your HackMD after the deadline, but any changes made after the submission time may not be reviewed by the TAs.\nNote: Teams that do not submit their link on time will be ineligible for that week’s shio selection.\n\n\n\n\n\nIf your notes or shio explorations are selected by TA, we will award your team a shio card. The instructor might highlight the shio during lecture, if time allowed.\nAt the end of the semester, we will rank teams by the number of shio card they get throughout the semester. The top 6 team will receive +6 extra points to their final course grade. The 7th to 12th team will receive +4 extra points to their final course grade. The 13th to 18th team will receive +2 extra points to their final course grade. In the event of a tie, we do you a favor: all tied teams are elevated to the highest rank possible.\n\n\n\nPhysical office hour is marked as Office Hour on the syllabus and primarily takes place on Monday’s official class time. Attendance is optional, but encouraged. The instructor and TAs will be available to answer questions and provide guidance.\nWe encourage you to use this time to work with your teammates on the worksheet released the previous Wednesday. Please arrive according to this time slot:\n\n10:10 AM: Team 1–15 (Teams 16–30 after midterm)\n11:10 AM: Team 16–30 (Teams 1–15 after midterm)\n\nWe will announce online office hour hosted on Discord voice channel, if the need arises.\n\n\n\n\nA quiz will take place in the middle of the Wednesday lecture time. Quiz covers the previous week’s content, including required reading, video lectures, and hands-on labs. If there are extended coverage, we will announce one week in advance.\nThroughout the semester, we will have 8 quizzes. The 6 highest scores will count toward your final grade.\n\n\n\nIf you are unable to attend a quiz, midterm or final exam due to force majeure (不可抗力因素), you may submit a leave request through the school’s leave application system. If the leave request is approved, you may apply for a make-up exam. If the leave request is submitted +3 days after the quiz or exam, you are ineligible for a make-up exam.\n\n\n\nThere are two xv6 programming labs at the second half of the semester that require live demos. The demo policy is TBA.\n\nWe provide a standardized programming environment in the form of a Docker container to prevent situations where code runs correctly on your computer but not on the TA’s.\nYou are not allowed to publish your code for public access or share it with classmates outside your team. All code should be maintained in a private GitHub repository accessible only to your teammates.\nIf you are found copying another student’s code, you will automatically receive a score of zero for that assignment.\n\n\n\n\n\n\nTake responsibility for your own learning. Don’t rely on your teammates to carry you.\nDo not share your team’s HackMD notes with non-team members.\nCitation: If you use information from an external website or document, you must cite the source with a link. This helps others find the resource and serves as a reference for your future self.\nGetting help: Solve problems on your own first, then within your team, and only then ask a TA or post it on Discord. If you receive help on Discord from classmates or TAs, please credit them by mentioning their Discord nickname in your notes.\nHelping Others: When helping classmates on Discord, provide hints, general directions, or links to external resources. Do not share direct answers or full code snippets, as this prevents your classmates from learning. The TAs reserve the right to remove any posts that violate this rule.\n\n\n\n\nCheating in any form will not be tolerated in this course.\nMidterm & final exams: no devices, notes, or papers are permitted. All electronic devices, including phones, smartwatches, and earbuds, must be powered off.\nQuiz: conducted in person through an online platform. You are required to be physically present in the classroom with a single device capable of internet connection. You must close all other tabs, applications, and terminals before the quiz begins, and you are not allowed to access communication or collaboration platforms such as Facebook, Instagram, Line, Discord, or email during quiz time. You are not allowed to access search engine or AI tools, such as ChatGPT during a quiz. You are not allowed to read any note during a quiz. All notifications must be turned off before the quiz starts; failure to do so will be treated as an attempt to cheat.\nAny violation of the above restrictions or any attempt to collaborate with others during an exam/quiz will result in an automatic score of zero for that assessment.\n\n\n\nChatGPT or other kinds of LLM can be a great tool, but it will limit your learning if you rely on it too much. You spend your time here not just to get grade, but to learn and make this knowledge your own. Here’s some advice:\n\nLearn how to ask: LLMs are most helpful when you know what to ask it and how to interpret its result, NOT when you copy+paste questions and then copy+paste the answer it provides.\nGet definition: If you’re asking questions about OS definitions or explanations about terminology, that’s great! LLM can be a great Google replacement.\nFor programming lab assignments, try to write your code independently first. If you get stuck, it’s okay to ask an LLM for guidance on function usage or debugging help, but make sure you understand the solution. Never submit code that you don’t thoroughly understand.\nIf you’re brainstorming approaches to a problem, always think on your own first and then ask an LLM to expand your ideas. You don’t want to limit your thinking by relying on AI first. Always test what you understand.\nDo not auto-generate code for programming lab and paste AI-written “discoveries” or answers without you rewriting with your own word). Grammar fix is ok, but you must write the main content.\nLLMs are not permitted during quizzes, midterm, or final.\nFun fact about cat"},{"objectID":"admin/policies.html#worksheet","href":"admin/policies.html#worksheet","title":"Course Policies","section":"","text":"This course uses worksheet to guide your learning journey. A new worksheet will be announced each Wednesday at 17:00. This worksheet includes required videos, textbook readings, and a hands-on lab. Please work through this material independently, and discuss any problems you encounter with your teammates (three people per team).\n\nAs you work, collaborate on a shared HackMD document for your team’s learning notes. The hands-on lab contains several reflection questions (marked Q1, Q2, etc.). Write your answers in the HackMD document.\nWe also encourage you to explore beyond the required content by asking your own questions and documenting your discoveries. We call this a shio (short for Shio Dan Ji Lie). Details on Shio Dan Ji Lie\nPlease use the course’s official HackMD Report Template for your notes.\n\n\n\n\n\n\nStructure of Weekly Notes\n\n\n\n\n\nPlease structure your team’s shared HackMD notes as follows:\n\nVideo/Textbook: Shared Notes\nVideo/Textbook: Shio (Explorations & Discoveries)\nHands-on Lab: Answers to Reflection Questions\nHands-on Lab: Shio (Explorations & Discoveries)\nHands-on Lab: Key Takeaways & What I Learned\n\n\n\n\n\n\n\n\n\n\nSubmitting the Weekly Notes\n\n\n\n\n\nSubmit the link to your team’s HackMD document to eLearn by the following Wednesday at 17:00. Please ensure the link allow visitors to edit, but don’t publish it.\nThe TAs will review every submission, leave comments, and select outstanding notes, insightful reflections, and excellent shio explorations to share with the class on Discord. You may continue to add content to your HackMD after the deadline, but any changes made after the submission time may not be reviewed by the TAs.\nNote: Teams that do not submit their link on time will be ineligible for that week’s shio selection.\n\n\n\n\n\nIf your notes or shio explorations are selected by TA, we will award your team a shio card. The instructor might highlight the shio during lecture, if time allowed.\nAt the end of the semester, we will rank teams by the number of shio card they get throughout the semester. The top 6 team will receive +6 extra points to their final course grade. The 7th to 12th team will receive +4 extra points to their final course grade. The 13th to 18th team will receive +2 extra points to their final course grade. In the event of a tie, we do you a favor: all tied teams are elevated to the highest rank possible.\n\n\n\nPhysical office hour is marked as Office Hour on the syllabus and primarily takes place on Monday’s official class time. Attendance is optional, but encouraged. The instructor and TAs will be available to answer questions and provide guidance.\nWe encourage you to use this time to work with your teammates on the worksheet released the previous Wednesday. Please arrive according to this time slot:\n\n10:10 AM: Team 1–15 (Teams 16–30 after midterm)\n11:10 AM: Team 16–30 (Teams 1–15 after midterm)\n\nWe will announce online office hour hosted on Discord voice channel, if the need arises."},{"objectID":"admin/policies.html#quiz","href":"admin/policies.html#quiz","title":"Course Policies","section":"","text":"A quiz will take place in the middle of the Wednesday lecture time. Quiz covers the previous week’s content, including required reading, video lectures, and hands-on labs. If there are extended coverage, we will announce one week in advance.\nThroughout the semester, we will have 8 quizzes. The 6 highest scores will count toward your final grade."},{"objectID":"admin/policies.html#attendance","href":"admin/policies.html#attendance","title":"Course Policies","section":"","text":"If you are unable to attend a quiz, midterm or final exam due to force majeure (不可抗力因素), you may submit a leave request through the school’s leave application system. If the leave request is approved, you may apply for a make-up exam. If the leave request is submitted +3 days after the quiz or exam, you are ineligible for a make-up exam."},{"objectID":"admin/policies.html#programming-labs","href":"admin/policies.html#programming-labs","title":"Course Policies","section":"","text":"There are two xv6 programming labs at the second half of the semester that require live demos. The demo policy is TBA.\n\nWe provide a standardized programming environment in the form of a Docker container to prevent situations where code runs correctly on your computer but not on the TA’s.\nYou are not allowed to publish your code for public access or share it with classmates outside your team. All code should be maintained in a private GitHub repository accessible only to your teammates.\nIf you are found copying another student’s code, you will automatically receive a score of zero for that assignment."},{"objectID":"admin/policies.html#collaboration-citation","href":"admin/policies.html#collaboration-citation","title":"Course Policies","section":"","text":"Take responsibility for your own learning. Don’t rely on your teammates to carry you.\nDo not share your team’s HackMD notes with non-team members.\nCitation: If you use information from an external website or document, you must cite the source with a link. This helps others find the resource and serves as a reference for your future self.\nGetting help: Solve problems on your own first, then within your team, and only then ask a TA or post it on Discord. If you receive help on Discord from classmates or TAs, please credit them by mentioning their Discord nickname in your notes.\nHelping Others: When helping classmates on Discord, provide hints, general directions, or links to external resources. Do not share direct answers or full code snippets, as this prevents your classmates from learning. The TAs reserve the right to remove any posts that violate this rule."},{"objectID":"admin/policies.html#cheating","href":"admin/policies.html#cheating","title":"Course Policies","section":"","text":"Cheating in any form will not be tolerated in this course.\nMidterm & final exams: no devices, notes, or papers are permitted. All electronic devices, including phones, smartwatches, and earbuds, must be powered off.\nQuiz: conducted in person through an online platform. You are required to be physically present in the classroom with a single device capable of internet connection. You must close all other tabs, applications, and terminals before the quiz begins, and you are not allowed to access communication or collaboration platforms such as Facebook, Instagram, Line, Discord, or email during quiz time. You are not allowed to access search engine or AI tools, such as ChatGPT during a quiz. You are not allowed to read any note during a quiz. All notifications must be turned off before the quiz starts; failure to do so will be treated as an attempt to cheat.\nAny violation of the above restrictions or any attempt to collaborate with others during an exam/quiz will result in an automatic score of zero for that assessment."},{"objectID":"admin/policies.html#use-of-llms","href":"admin/policies.html#use-of-llms","title":"Course Policies","section":"","text":"ChatGPT or other kinds of LLM can be a great tool, but it will limit your learning if you rely on it too much. You spend your time here not just to get grade, but to learn and make this knowledge your own. Here’s some advice:\n\nLearn how to ask: LLMs are most helpful when you know what to ask it and how to interpret its result, NOT when you copy+paste questions and then copy+paste the answer it provides.\nGet definition: If you’re asking questions about OS definitions or explanations about terminology, that’s great! LLM can be a great Google replacement.\nFor programming lab assignments, try to write your code independently first. If you get stuck, it’s okay to ask an LLM for guidance on function usage or debugging help, but make sure you understand the solution. Never submit code that you don’t thoroughly understand.\nIf you’re brainstorming approaches to a problem, always think on your own first and then ask an LLM to expand your ideas. You don’t want to limit your thinking by relying on AI first. Always test what you understand.\nDo not auto-generate code for programming lab and paste AI-written “discoveries” or answers without you rewriting with your own word). Grammar fix is ok, but you must write the main content.\nLLMs are not permitted during quizzes, midterm, or final.\nFun fact about cat"},{"objectID":"admin/schedule.html","href":"admin/schedule.html","title":"Operating System (2025 Fall)","section":"","text":"Back to top"},{"objectID":"staff.html","href":"staff.html","title":"Operating System (2025 Fall)","section":"","text":"Staff\n        \n            \n            \n                \n                陳耘志 (Tony)\n                Instructor\n                \n                \n            \n            \n            \n                \n                李侑聲 (Nelson)\n                TA\n            \n            \n                \n                林奕辰 (Ian)\n                TA\n            \n            \n                \n                周恒生 (Andrew)\n                TA\n            \n            \n                \n                黃頂軒 (Felix)\n                TA\n            \n            \n                \n                賴允中 (Edwin)\n                TA\n            \n            \n                \n                林家宇 (Atticus)\n                TA\n            \n        \n    \n\n\n\n Back to top"}]