[{"objectID":"topics/wsl.html","href":"topics/wsl.html","title":"Windows Subsystem for Linux (WSL)","section":"","text":"The ability to run native Linux ELF binaries on Windows seems like magic. WSL1 achieved this without a virtual machine: it just translate the system calls. WSL2 uses a completely different approach.\nYour mission is to create a video that explains how WSL1 works. How did Microsoft engineers intercept Linux system calls and translate them into something the Windows NT kernel could understand? You should focus on the journey of a single Linux system call, from the moment a user-space application invokes it to the moment the Windows kernel completes the request.\n\n\n\n\nExplain the difference between WSL1‚Äôs translation layer approach and WSL2‚Äôs virtualization approach. Why did Microsoft make this change?\n\n\n\nInvestigate the role of the ‚ÄúPico Process‚Äù and the kernel-mode drivers (lxss.sys, lxcore.sys). How do they work together?\n\n\n\n\nLoading an ELF Binary: How does Windows even recognize and start a Linux executable?\nThe Interception: When a Linux program calls fork() or open(), how is that call caught before it fails?\nThe Translation: How are the arguments and semantics of a Linux system call mapped to an equivalent Windows NT kernel call? What happens when a perfect 1-to-1 mapping doesn‚Äôt exist?\nRing 0: Explain how this translation happens in the privileged context of the kernel\n\n\n\n\n\n\nWSL1 v.s WSL2\nWSL2 Linux Kernel\nWSL2 Boot Process\nWSL1"},{"objectID":"topics/wsl.html#requirements","href":"topics/wsl.html#requirements","title":"Windows Subsystem for Linux (WSL)","section":"","text":"Explain the difference between WSL1‚Äôs translation layer approach and WSL2‚Äôs virtualization approach. Why did Microsoft make this change?\n\n\n\nInvestigate the role of the ‚ÄúPico Process‚Äù and the kernel-mode drivers (lxss.sys, lxcore.sys). How do they work together?\n\n\n\n\nLoading an ELF Binary: How does Windows even recognize and start a Linux executable?\nThe Interception: When a Linux program calls fork() or open(), how is that call caught before it fails?\nThe Translation: How are the arguments and semantics of a Linux system call mapped to an equivalent Windows NT kernel call? What happens when a perfect 1-to-1 mapping doesn‚Äôt exist?\nRing 0: Explain how this translation happens in the privileged context of the kernel"},{"objectID":"topics/wsl.html#references","href":"topics/wsl.html#references","title":"Windows Subsystem for Linux (WSL)","section":"","text":"WSL1 v.s WSL2\nWSL2 Linux Kernel\nWSL2 Boot Process\nWSL1"},{"objectID":"topics/sandbox.html","href":"topics/sandbox.html","title":"Browser Sandboxing","section":"","text":"Do you know that malicious code from a website could attack your computer? Sandboxing is the security mechanism that puts web content in a restrictive box to limit the damage it can do.\nYour mission is to create a video explaining how a modern browser like Chrome uses Linux kernel features to construct a secure sandbox.\nYou will investigate the multiple layers of this box. You will explain how each one removes a different set of dangerous capabilities from the code\n\n\n\n\nBegin by explaining the core security concept that motivates sandboxing: the Principle of Least Privilege.\nWhy is it a terrible idea to let a process that parses HTML to have access to your entire file system or network?\n\n\n\nYour video should explain how multiple layers of security work together. A single layer might be bypassed, but breaking through all of them is much harder. Focus on these key Linux features:\n\nNamespaces:\n\nExplain how namespaces trick a process into believing it‚Äôs the only one on the system.\nCover at least the PID (Process ID) and User namespaces.\n\nSystem Call Filtering:\n\nseccomp-bpf: Explain how the browser can give the kernel a strict ‚Äúallow list‚Äù of system calls that a renderer process is permitted to use. What happens when it tries to use a forbidden one, like reboot()?\n\nResource Management:\n\nsetrlimit: How does this prevent a malicious process from crashing the system by using up all the memory or opening thousands of files?\ncgroups: Briefly explain how control groups can be used to limit CPU and memory usage so that one tab won‚Äôt slow down the entire machine.\n\n\n\n\n\n\n\nLinux Security and How Web Browser Sandboxes Really Work - Patricia Aas"},{"objectID":"topics/sandbox.html#requirements","href":"topics/sandbox.html#requirements","title":"Browser Sandboxing","section":"","text":"Begin by explaining the core security concept that motivates sandboxing: the Principle of Least Privilege.\nWhy is it a terrible idea to let a process that parses HTML to have access to your entire file system or network?\n\n\n\nYour video should explain how multiple layers of security work together. A single layer might be bypassed, but breaking through all of them is much harder. Focus on these key Linux features:\n\nNamespaces:\n\nExplain how namespaces trick a process into believing it‚Äôs the only one on the system.\nCover at least the PID (Process ID) and User namespaces.\n\nSystem Call Filtering:\n\nseccomp-bpf: Explain how the browser can give the kernel a strict ‚Äúallow list‚Äù of system calls that a renderer process is permitted to use. What happens when it tries to use a forbidden one, like reboot()?\n\nResource Management:\n\nsetrlimit: How does this prevent a malicious process from crashing the system by using up all the memory or opening thousands of files?\ncgroups: Briefly explain how control groups can be used to limit CPU and memory usage so that one tab won‚Äôt slow down the entire machine."},{"objectID":"topics/sandbox.html#references","href":"topics/sandbox.html#references","title":"Browser Sandboxing","section":"","text":"Linux Security and How Web Browser Sandboxes Really Work - Patricia Aas"},{"objectID":"quizzes/quiz02.html","href":"quizzes/quiz02.html","title":"Operating System (2025 Fall)","section":"","text":"Back to top"},{"objectID":"index.html","href":"index.html","title":"Operating System (2025 Fall)","section":"","text":"üì¢ Aug.¬†25, 2025: All students who want to be in the course are required to take the prerequisite quiz on September 1st, 2025, whether you are officially enrolled or petitioning to be added.","crumbs":["Home","OS 2025 Fall"]},{"objectID":"index.html#information","href":"index.html#information","title":"Operating System (2025 Fall)","section":"Information","text":"Information\nThis course guides you to explore how operating systems work ‚Äúunder the hood.‚Äù You will learn how operating systems manage hardware resources, and how to ensure secure and fair resource sharing among processes. We will discuss process management, system calls, virtual memory, storage, scheduling, virtualization, and modern system architectures. You will learn by doing to acquire the skills to analyze, debug, and improve complex systems you use every day.\nTime: Monday 10:10~12:10 & Wednesday 09:00~09:50\nClassroom: DELTA Âè∞ÈÅî 102 (ÂÆπÈáè100)\nTextbook:\n\nOperating Systems: Three Easy Pieces, Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau\nOperating System Concepts, 10/e, Abraham Silberschatz and James Peterson.\n\nGrading:\n\nLabs (15%)\nMidterm Exam (30%)\nFinal Exam (35%)\nQuiz (20%)\n\nLanguage: Instructor will mostly speak English, but you aren‚Äôt restricted not to speak Mandarin (Ê≠°Ëøé‰ª•‰∏≠ÊñáÁôºË®Ä).\nExam: Midterm and final exam are paper-based, closed-book.\nDetailed Info:\n\nLet your curiosity fly: Shio Dan Ji Lie\nLecture Routine\nAcademic Integrity","crumbs":["Home","OS 2025 Fall"]},{"objectID":"index.html#cast","href":"index.html#cast","title":"Operating System (2025 Fall)","section":"Cast","text":"Cast\nNini and Niko will be your friends throughout your journey of operating system this semester.\n\n\n\n\n\nNini\n\n\n\nNini is a smart cat, like Doraemon, but not a robot. Nini is the CTO of Datadog, the company that offers Linux server monitoring service.\nBefore joining Datadog, Nini worked at Redhat.\n\nFavorite catchphrase: ‚ÄúA piece of fish!‚Äù\nFavorite tools on Linux: *cat (cat, zcat, net-cat, netcat, socat etc.)\n\n\n\n\n\n\n\n\nNiko\n\n\n\nNiko is a nervous, but humble cat, like bugcat Capoo. Niko works as a junior engineer at Datadog.\nNiko works hard developing his company‚Äôs dog tool (there are many cats and cows on Linux, but not many dogs). Niko‚Äôs favorite animal is panda (a stronger and bigger cat, he thought).\n\nFavorite catchphrase: ‚ÄúLe Mao!‚Äù\nFavorite tools on Linux: cowsay with Capoo, yes\nFavorite food: Katsudon","crumbs":["Home","OS 2025 Fall"]},{"objectID":"admin/explore.html","href":"admin/explore.html","title":"Operating System (2025 Fall)","section":"","text":"In this course, I hope you can learn by teaching and exploring based on your interest.\nStarting after the midterm, every team will work on an Exploration Project. Each team will pick a topic. By the end of the semester, each team will make a short video (3-5 minutes) to share with your classmates. The goal is not to repeat what we‚Äôve already taught, but to dig deeper into the ‚Äúwhy‚Äù behind the topics, and connect them to real-world problems.\nThis project is your chance to ask your own questions, explain concepts in your own words, and make sense of complex ideas through your own exploration.\n\n\nWe will annouce a list of topics and papers for you to choose from before midterm. But you are also welcome to propose your own ideas if you have something you‚Äôre curious about. Your project can take one of these directions:\n\n\n\nPick a topic, research it very thoroughly, and produce a short video that teaches this topic to your classmates. Please make it very fun and educational to watch. You can also teach about common misconceptions, or parts that confused you at first, and helps your audience go through it.\n\n\n\nWe will give you a list of research papers on OS topics. But instead of focusing on the methods and results, your task is to explain the background and motivation of the paper. Why was this problem important? Which textbook concept does it relate to? What was missing from the traditional approach? Your video should help your classmates understand why this paper needed to be written.\n\n\n\n\n\nAfter the midterm, you‚Äôll see a list of suggested topics and papers.\nEach topic is available to one team only. These topics are ÂÖàÊê∂ÂÖàÁáü: (ÊÄéÈ∫ºÊ±∫ÂÆö draw?)\nYour team will need to submit a simple proposal: What‚Äôs your topic? What‚Äôs your approach? Who will do what?\nIf you have an idea outside of the suggested list, propose it! We‚Äôre open to creative projects as long as they connect to OS concepts.\n\n\n\n\n\n\nFinal videos are due in Week 16.\nAll videos will be showcased on our course website ‚Äî your classmates will watch and learn from your work.\nYou‚Äôll also provide feedback to other teams‚Äô videos through a simple peer review form.\n\n\n\n\n\n\n\n\nEvaluation Criteria (Rubric)\n\n\n\n\n\nEach project will be graded out of 10 points based on these aspects:\n1. Clarity of Explanation (2 points)\nCan you explain the concept in a way that others (students or non-CS audience) can easily follow? Are technical terms introduced and clarified well?\n2. Depth of Understanding (3 points)\nDid you show that you understand not just the ‚Äúwhat‚Äù, but the ‚Äúwhy‚Äù behind the concept or problem? Did you connect it to textbook materials or real-world scenarios?\n3. Structure and Presentation (2 points)\nIs the video well-structured, with a logical flow? Is it visually engaging, with clear narration and visuals that support understanding?\n4. Team Collaboration (2 points)\nDid all team members contribute meaningfully? Are multiple voices or roles evident in the video production?\n5. Creativity and Insight (Bonus +1 point)\nExceptional creativity in presentation or particularly insightful explanations will be awarded an extra point.\nThe scores will be a combination of TA assessment and peer feedback. Peer feedback will not directly give points, but thoughtful comments from peers will help you gain participation credit."},{"objectID":"admin/explore.html#os-exploration-projects","href":"admin/explore.html#os-exploration-projects","title":"Operating System (2025 Fall)","section":"","text":"In this course, I hope you can learn by teaching and exploring based on your interest.\nStarting after the midterm, every team will work on an Exploration Project. Each team will pick a topic. By the end of the semester, each team will make a short video (3-5 minutes) to share with your classmates. The goal is not to repeat what we‚Äôve already taught, but to dig deeper into the ‚Äúwhy‚Äù behind the topics, and connect them to real-world problems.\nThis project is your chance to ask your own questions, explain concepts in your own words, and make sense of complex ideas through your own exploration.\n\n\nWe will annouce a list of topics and papers for you to choose from before midterm. But you are also welcome to propose your own ideas if you have something you‚Äôre curious about. Your project can take one of these directions:\n\n\n\nPick a topic, research it very thoroughly, and produce a short video that teaches this topic to your classmates. Please make it very fun and educational to watch. You can also teach about common misconceptions, or parts that confused you at first, and helps your audience go through it.\n\n\n\nWe will give you a list of research papers on OS topics. But instead of focusing on the methods and results, your task is to explain the background and motivation of the paper. Why was this problem important? Which textbook concept does it relate to? What was missing from the traditional approach? Your video should help your classmates understand why this paper needed to be written.\n\n\n\n\n\nAfter the midterm, you‚Äôll see a list of suggested topics and papers.\nEach topic is available to one team only. These topics are ÂÖàÊê∂ÂÖàÁáü: (ÊÄéÈ∫ºÊ±∫ÂÆö draw?)\nYour team will need to submit a simple proposal: What‚Äôs your topic? What‚Äôs your approach? Who will do what?\nIf you have an idea outside of the suggested list, propose it! We‚Äôre open to creative projects as long as they connect to OS concepts.\n\n\n\n\n\n\nFinal videos are due in Week 16.\nAll videos will be showcased on our course website ‚Äî your classmates will watch and learn from your work.\nYou‚Äôll also provide feedback to other teams‚Äô videos through a simple peer review form.\n\n\n\n\n\n\n\n\nEvaluation Criteria (Rubric)\n\n\n\n\n\nEach project will be graded out of 10 points based on these aspects:\n1. Clarity of Explanation (2 points)\nCan you explain the concept in a way that others (students or non-CS audience) can easily follow? Are technical terms introduced and clarified well?\n2. Depth of Understanding (3 points)\nDid you show that you understand not just the ‚Äúwhat‚Äù, but the ‚Äúwhy‚Äù behind the concept or problem? Did you connect it to textbook materials or real-world scenarios?\n3. Structure and Presentation (2 points)\nIs the video well-structured, with a logical flow? Is it visually engaging, with clear narration and visuals that support understanding?\n4. Team Collaboration (2 points)\nDid all team members contribute meaningfully? Are multiple voices or roles evident in the video production?\n5. Creativity and Insight (Bonus +1 point)\nExceptional creativity in presentation or particularly insightful explanations will be awarded an extra point.\nThe scores will be a combination of TA assessment and peer feedback. Peer feedback will not directly give points, but thoughtful comments from peers will help you gain participation credit."},{"objectID":"admin/waitbutwhy.html","href":"admin/waitbutwhy.html","title":"ÁáíËõã‰∏Ä‰∏ã SHIO DAN JI LIE","section":"","text":"ÁáíËõã‰∏Ä‰∏ã SHIO DAN JI LIE\n\n\nÁï∂‰Ω†Âú®ÁúãË™≤Â†ÇÂΩ±Áâá„ÄÅËÆÄÊïôÁßëÊõ∏„ÄÅÊàñÂÅöÂØ¶È©óÁöÑÊôÇÂÄôÔºåÊúâÊ≤íÊúâÁ™ÅÁÑ∂ OS ‚Ä¶ „ÄåÂí¶ÔºüÁ≠â‰∏Ä‰∏ãÔºÅ„ÄçÔºü (When you‚Äôre watching a lecture video, reading the textbook, or doing lab, do you suddenly have the OS ‚Ä¶ ‚ÄúEh? Wait, but why?‚Äù?)\nË´ãÂÖàÊö´ÂÅúÔºåËá™Â∑±ÊÄùËÄÉ‰∏¶ÊâæÂá∫Á≠îÊ°à„ÄÇËÆì‰Ω†ÁöÑÂ•ΩÂ•áÂøÉÈ£õÁøîÔºÅ (Please pause, think and find the answer yourself. Let your curiosity fly!)\n\n\n\n\n\nÁï∂Ê≤íË¨õÊ∏ÖÊ•ö„ÄÅÊïôÁßëÊõ∏Â∏∂ÈÅéÂéª„ÄÅÂ§ßÂÆ∂ÈÉΩÊ≤íÊÉ≥ÈÅéÁöÑÊôÇÂÄôÔºåË¶ÅÁôºÂïèÔºö (Ask when it wasn‚Äôt explained clearly, glossed over in the textbook, or nobody thought about it:)\n\n\n„ÄåÁÇ∫‰ªÄÈ∫ºÊúÉÊòØÈÄôÊ®£Ôºü„Äç (‚ÄúWhy is this like this?‚Äù)\n„ÄåÂÆÉÁ∏ΩÊòØÈÄôÊ®£ÈÅã‰ΩúÂóéÔºü„Äç (‚ÄúDoes it always work this way?‚Äù)\n„ÄåÊàëËÉΩÊâìÁ†¥ÈÄôÂÄãÂÅáË®≠ÂóéÔºü„Äç (‚ÄúCan I break this assumption?‚Äù)\n\n\nÂØ´‰∏ã‰Ω†ÁöÑÂïèÈ°åÔºöË¶ÅÂÖ∑È´î„ÄÇ‰∏çÊòØ„Äå‰ªÄÈ∫ºÊòØ context switch„ÄçÈÄôÁ®ÆÊü•ÊïôÁßëÊõ∏Â∞±ÊúâÁöÑÂïèÈ°åÔºå ËÄåÊòØ„ÄåÂΩ±ÁâáË™™ context switch Êúâ overheadÔºåÈÇ£Âú® multicore CPU ÊôÇÊúÉÊÄéÊ®£Ôºü„ÄçÈÄôÁ®ÆËÉΩÂª∂‰º∏ÁöÑÂïèÈ°å„ÄÇ (Write down your question: Be specific. Not something like ‚ÄúWhat is a context switch?‚Äù which the textbook directly explains, but rather ‚ÄúThe video says context switch has overhead‚Äîwhat happens on a multicore CPU?‚Äù which extends the idea.)\nÊâæÁ≠îÊ°àÔºöÊü•Ë≥áÊñô„ÄÅÂãïÊâãË©¶„ÄÅÊé®Êï≤Âá∫Á≠îÊ°à„ÄÇ (Find the answer: Look things up, experiment, reason out the answer.)\n\n\n\nReal exploration earns real respect.\n\nÂú® Discord ‰∏äÂàÜ‰∫´‰Ω†ÁöÑÁôºÁèæÔºöÂØ´‰∏ã‰Ω†Âïè‰∫Ü‰ªÄÈ∫ºÔºüÊü•‰∫ÜÂì™‰∫õË≥áÊñôÔºüË©¶‰∫Ü‰ªÄÈ∫ºÔºüÁôºÁèæ‰∫Ü‰ªÄÈ∫ºÔºüÂ¶ÇÊûúÂÖßÂÆπÂ§™Â§öÔºåÂèØ‰ª•ÈôÑ‰∏ä Hackmd ÈÄ£Áµê„ÄÇ (Pose your discovery on Discord: Write down what you asked, what resources you checked, what you tried, and what you discovered. If it‚Äôs too long, attach a Hackmd link.)\n\n\n\nWeekly Highlights & Badge Awards\n\nÁØÑÂúçÔºöÂΩ±Áâá„ÄÅÂØ¶È©ó„ÄÅÊïôÁßëÊõ∏ (Scope: video, lab, textbook)\nÊØèÈÄ±‰∏âÂä©ÊïôÊúÉÈÅ∏Âá∫ 3~5 ÂÄãÊúÄ‰Ω≥ÊèêÂïèËàáÊé¢Á¥¢ÔºåÂú®Ë™≤Â†Ç‰∏ä highlightÔºàshio timeÔºâ„ÄÇ (Every Wednesday, the TAs will select 3‚Äì5 of the best questions and explorations to highlight in class (shio time).)\nÂè™Ë¶Å‰Ω†ÁöÑÂïèÈ°åË¢´ highlightÔºå‰Ω†ÂÄëÈÄôÁµÑÂ∞áÁç≤Âæó‰∏ÄÂºµÁáíËõãÂç°„ÄÇ (As long as your question gets highlighted, your team will receive a ‚Äúshio card.‚Äù)\nÂ≠∏ÊúüÊú´Áç≤ÂæóÊúÄÂ§öÁáíËõãÂç°ÁöÑÂ∞èÁµÑÔºåÂ∞áÊúÉÊúâÈ°çÂ§ñÂä†ÂàÜÊ©üÊúÉ„ÄÇ (At the end of the semester, the team with the most shio cards will have an opportunity for extra credit.)\n\n\n\n\n\n\n\n\nWhat makes a good ‚ÄúShio Dan Ji Lie‚Äù question?\n\n\n\n\n\n\nGenuine Curiosity\nDon‚Äôt ask for the sake of asking (ÂïèÁàΩÁöÑ). Ask because it needs to be asked. ÊòØÂõ†ÁÇ∫‰Ω†ÁúüÂøÉË¶∫ÂæóÈÄôÂÄãÂú∞ÊñπÂÄºÂæóÊé¢Ë®é„ÄÇ\nGoes Beyond the Obvious\nÊïôÁßëÊõ∏Ê≤íÂØ´Ê∏ÖÊ•öÁöÑÂú∞Êñπ„ÄÅÂΩ±ÁâáÊ≤íË¨õÈÄèÁöÑÁ¥∞ÁØÄ„ÄÅÂØ¶‰ΩúÊôÇÊâçÁôºÁèæÁöÑ tricky Èªû„ÄÇ\nSelf-Driven Discovery\n‰Ω†‰∏çÊòØÂïèËÄÅÂ∏´„ÄåËÄÅÂ∏´ÈÄôÊòØ‰ªÄÈ∫º„ÄçÔºåËÄåÊòØËá™Â∑±Êü•‰∫ÜË≥áÊñô„ÄÅÊâæ‰∫Üpaper„ÄÅÁîöËá≥ÂØ´codeÈ©óË≠â„ÄÇ\nExplains Back to Others\n‰Ω†ËÉΩÊääÈÄôÊÆµÊé¢Á¥¢Á∂ìÈÅéÊï¥ÁêÜÁµ¶Â§ßÂÆ∂ÁúãÔºåÂπ´Âä©ÂêåÂ≠∏‰∏ÄËµ∑‰∫ÜËß£ÈÄôÂÄãÂïèÈ°å„ÄÇ\n\nIt‚Äôs not about asking hard questions.\nIt‚Äôs about asking real, alive, questions ‚Äî the ones you personally want to figure out.\n\n\n\n\n\n\n\n\n Back to top"},{"objectID":"weeks/w2.html","href":"weeks/w2.html","title":"Week 2","section":"","text":"Week 2\n\n\n\n\n Back to top"},{"objectID":"weeks/w1.html","href":"weeks/w1.html","title":"Week 1","section":"","text":"Week 1\n\n\n\n\n Back to top","crumbs":["Home","Week 1"]},{"objectID":"handouts/env_setup.html","href":"handouts/env_setup.html","title":"Environment setup","section":"","text":"Installing VirtualBox, visit the VirtualBox website using this link\n\n\n\n\n\nInstalling Vagrant Go to the Vagrant download page at link, and under the ‚ÄúOperating System‚Äù heading, click on the appropriate ‚ÄúBinary‚Äù for your computer. The installer will be downloaded to your computer.\n\n\n\n\n\n\n\nChoose AMD64 if you are using Windows 64bits\n\n\n\n\n\n\n\nSetting up the Ubuntu machine\n\nList out the files in the home directory cd ~ using the ls command to check if Vagrant was successfully installed, you should find the file .vagrant.d.\nAfter confirming the installation, create a directory for the Ubuntu setup using the mkdir\nChange into the directory that you created\nRun vagrant init command. Running this command automatically places a Vagrantfile in the directory created above. A Vagrantfile is a file that instructs Vagrant to create new Vagrant machines or boxes.\n\n\n\n\nrun vagrant init alvistack/ubuntu-24.04 --box-version 20250802.1.1 then vagrant up\n\nBringing machine 'default' up with 'virtualbox' provider...\n==&gt; default: Box 'alvistack/ubuntu-24.04' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: 20250802.1.1\n==&gt; default: Loading metadata for box 'alvistack/ubuntu-24.04'\n    default: URL: https://vagrantcloud.com/api/v2/vagrant/alvistack/ubuntu-24.04\n==&gt; default: Adding box 'alvistack/ubuntu-24.04' (v20250802.1.1) for provider: virtualbox (amd64)\n    default: Downloading: https://vagrantcloud.com/alvistack/boxes/ubuntu-24.04/versions/20250802.1.1/providers/virtualbox/amd64/vagrant.box\n    default:\n==&gt; default: Successfully added box 'alvistack/ubuntu-24.04' (v20250802.1.1) for 'virtualbox (amd64)'!\n==&gt; default: Importing base box 'alvistack/ubuntu-24.04'...\n\nSSH to your vagrant machine\n\nEnsure your virtual box VM is running\nConnect to the VM using vagrant ssh\n\n\n\n\n\n\n\n\n\n\n\nThe following steps should be run in the VS Code terminal\n\n\n\n\n\n\n\nChange to the directory containing the Vagrantfile\n\n~$ cd vagrant/machine\n\nGet the SSH config that Vagrant uses:\n\n~/vagrant/machine$ vagrant ssh-config\nHost default\n  HostName 127.0.0.1\n  User vagrant\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/liz/vagrant/machine/.vagrant/machines/default/virtualbox/private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nCopy the output of this into an SSH config file ‚Äî I added it to my default SSH config at ~/.ssh/config. In VScode you can easily open this file, or generate a custom config file for VSCode to use, by pressing ‚åò‚áßP and selecting Remote-SSH: Open Configuration File‚Ä¶\n\n\n\nThen connect to the host, you can also click on the Remote ‚ÄúQuick Access‚Äù status bar item in the lower left corner to get a list of the most common commands.\n\nBonus: if you put the config in your default SSH config file, you can now also SSH into the box from your laptop terminal with ssh default, saving you the bother of moving into the Vagrant machine‚Äôs directory.","crumbs":["Home","Week 1","Environment setup"]},{"objectID":"handouts/env_setup.html#virtual-box","href":"handouts/env_setup.html#virtual-box","title":"Environment setup","section":"","text":"Installing VirtualBox, visit the VirtualBox website using this link","crumbs":["Home","Week 1","Environment setup"]},{"objectID":"handouts/env_setup.html#vagrant","href":"handouts/env_setup.html#vagrant","title":"Environment setup","section":"","text":"Installing Vagrant Go to the Vagrant download page at link, and under the ‚ÄúOperating System‚Äù heading, click on the appropriate ‚ÄúBinary‚Äù for your computer. The installer will be downloaded to your computer.\n\n\n\n\n\n\n\nChoose AMD64 if you are using Windows 64bits\n\n\n\n\n\n\n\nSetting up the Ubuntu machine\n\nList out the files in the home directory cd ~ using the ls command to check if Vagrant was successfully installed, you should find the file .vagrant.d.\nAfter confirming the installation, create a directory for the Ubuntu setup using the mkdir\nChange into the directory that you created\nRun vagrant init command. Running this command automatically places a Vagrantfile in the directory created above. A Vagrantfile is a file that instructs Vagrant to create new Vagrant machines or boxes.\n\n\n\n\nrun vagrant init alvistack/ubuntu-24.04 --box-version 20250802.1.1 then vagrant up\n\nBringing machine 'default' up with 'virtualbox' provider...\n==&gt; default: Box 'alvistack/ubuntu-24.04' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: 20250802.1.1\n==&gt; default: Loading metadata for box 'alvistack/ubuntu-24.04'\n    default: URL: https://vagrantcloud.com/api/v2/vagrant/alvistack/ubuntu-24.04\n==&gt; default: Adding box 'alvistack/ubuntu-24.04' (v20250802.1.1) for provider: virtualbox (amd64)\n    default: Downloading: https://vagrantcloud.com/alvistack/boxes/ubuntu-24.04/versions/20250802.1.1/providers/virtualbox/amd64/vagrant.box\n    default:\n==&gt; default: Successfully added box 'alvistack/ubuntu-24.04' (v20250802.1.1) for 'virtualbox (amd64)'!\n==&gt; default: Importing base box 'alvistack/ubuntu-24.04'...\n\nSSH to your vagrant machine\n\nEnsure your virtual box VM is running\nConnect to the VM using vagrant ssh","crumbs":["Home","Week 1","Environment setup"]},{"objectID":"handouts/env_setup.html#vagrant-ssh-from-vs-code","href":"handouts/env_setup.html#vagrant-ssh-from-vs-code","title":"Environment setup","section":"","text":"The following steps should be run in the VS Code terminal\n\n\n\n\n\n\n\nChange to the directory containing the Vagrantfile\n\n~$ cd vagrant/machine\n\nGet the SSH config that Vagrant uses:\n\n~/vagrant/machine$ vagrant ssh-config\nHost default\n  HostName 127.0.0.1\n  User vagrant\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/liz/vagrant/machine/.vagrant/machines/default/virtualbox/private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nCopy the output of this into an SSH config file ‚Äî I added it to my default SSH config at ~/.ssh/config. In VScode you can easily open this file, or generate a custom config file for VSCode to use, by pressing ‚åò‚áßP and selecting Remote-SSH: Open Configuration File‚Ä¶\n\n\n\nThen connect to the host, you can also click on the Remote ‚ÄúQuick Access‚Äù status bar item in the lower left corner to get a list of the most common commands.\n\nBonus: if you put the config in your default SSH config file, you can now also SSH into the box from your laptop terminal with ssh default, saving you the bother of moving into the Vagrant machine‚Äôs directory.","crumbs":["Home","Week 1","Environment setup"]},{"objectID":"admin/policies.html","href":"admin/policies.html","title":"Course Policies","section":"","text":"Take responsibility for your own learning. Active learners will likely get better grades (according to science! ) and really feel ÊàëÊúâÂ≠∏Âà∞.\nThree persons form a team. Collaborate with your teammate to complete weekly tasks. Each team will be assigned fixed seat in the classroom (this helps me remember your name).\n\n\n\n\n\n10:10 AM: Team 1‚Äì15 (Teams 16‚Äì30 after midterm)\n11:10 AM: Team 16‚Äì30 (Teams 1‚Äì15 after midterm)\n\nThe instructor will announce this week‚Äôs lab on Monday at 10:10 AM. Please come to class according to your time slot, sit with your team. We will discuss previous week‚Äôs lab. You can ask questions.\nIf you don‚Äôt have questions, you may start working on this week‚Äôs lab with your teammates.\n\n\n\nEveryone gathers for a full-class in-person session. The instructor will either give a lecture or highlight some questions or extra material you posted on Discord (the shio time). In the middle of the class, you will take a 20-minute quiz based on the previous week‚Äôs lectures and labs. We will immediately discuss the quiz answers.\nThroughout the semester, we will have 10 quizzes. The 8 highest scores will count toward your final grade. Retakes are not allowed.\nAt 5:00 PM every Wednesday, the next set of lecture videos will be released online. Please watch the pre-recorded lecture videos before coming to class the following Monday, and test your understanding with the online quizzes. This way, we can spend more time on active learning rather than just listening to me talk!\n\n\n\n\n\nI believe you will learn best by attending physical lectures, but I understand that sometimes you can‚Äôt come. Attendance isn‚Äôt mandatory, but those who show up and engage typically learn the most üòâüòâ which is what we all want! My goal is simple: to make our time together valuable enough that you want to come.\n\n\n\n\n\nDon‚Äôt cheat. You are encouraged to collaborate, support each other, but don‚Äôt give up your rights to learn.\n\nDiscussion: use our Discord or NTHU eLearn to ask questions, discuss ideas, and share insights. You may talk about general concepts, debugging strategies, and how the system works. Treat your classmates like you‚Äôre a TA: offer hints, guide their thinking, don‚Äôt do the work for them.\nYou must NOT share code directly, whether in Discord, GitHub, or private messages. This includes past code from previous students or online sources.\nLabs are team-based, but you are personally responsible for understanding everything your team submits. Do not submit work that is not your own ‚Äî even if someone offers it freely. We will scan your code with plagiarism checker.\nAll quizzes and exams must be your own individual work.\n\n\n\n\nChatGPT, Github Copilot or other kinds of LLM can be a great tool, but it will limit your learning if you rely on it too much. Remember: you spend your time here not just to get grade, but to learn and make this knowledge your own. Here‚Äôs my advice:\n\nLearn how to ask: LLMs are most helpful when you know what to ask it and how to interpret its result, NOT when you copy+paste questions and then copy+paste the answer it provides.\nGet definition: If you‚Äôre asking questions about OS definitions or explanations about terminology, that‚Äôs great! LLM can be a great Google replacement.\nFor programming lab assignments, try to write your code independently first. If you get stuck, it‚Äôs okay to ask an LLM for guidance on function usage or debugging help, but make sure you understand the solution. Never submit code that you don‚Äôt thoroughly understand.\nIf you‚Äôre brainstorming approaches to a problem, always think on your own first and then ask an LLM to expand your ideas. You don‚Äôt want to limit your thinking by relying on AI first. Always test what you understand.\n\nGenerally: always consider whether you learned something more/better from your interaction with an LLM (the goal!) or if all you did was get an answer you don‚Äôt understand (NOT the goal).\nLLM is not allowed in quizzes, the midterm, and final exam (which are closed book)."},{"objectID":"admin/policies.html#lecture-routine","href":"admin/policies.html#lecture-routine","title":"Course Policies","section":"","text":"10:10 AM: Team 1‚Äì15 (Teams 16‚Äì30 after midterm)\n11:10 AM: Team 16‚Äì30 (Teams 1‚Äì15 after midterm)\n\nThe instructor will announce this week‚Äôs lab on Monday at 10:10 AM. Please come to class according to your time slot, sit with your team. We will discuss previous week‚Äôs lab. You can ask questions.\nIf you don‚Äôt have questions, you may start working on this week‚Äôs lab with your teammates.\n\n\n\nEveryone gathers for a full-class in-person session. The instructor will either give a lecture or highlight some questions or extra material you posted on Discord (the shio time). In the middle of the class, you will take a 20-minute quiz based on the previous week‚Äôs lectures and labs. We will immediately discuss the quiz answers.\nThroughout the semester, we will have 10 quizzes. The 8 highest scores will count toward your final grade. Retakes are not allowed.\nAt 5:00 PM every Wednesday, the next set of lecture videos will be released online. Please watch the pre-recorded lecture videos before coming to class the following Monday, and test your understanding with the online quizzes. This way, we can spend more time on active learning rather than just listening to me talk!"},{"objectID":"admin/policies.html#attendance","href":"admin/policies.html#attendance","title":"Course Policies","section":"","text":"I believe you will learn best by attending physical lectures, but I understand that sometimes you can‚Äôt come. Attendance isn‚Äôt mandatory, but those who show up and engage typically learn the most üòâüòâ which is what we all want! My goal is simple: to make our time together valuable enough that you want to come."},{"objectID":"admin/policies.html#academic-integrity","href":"admin/policies.html#academic-integrity","title":"Course Policies","section":"","text":"Don‚Äôt cheat. You are encouraged to collaborate, support each other, but don‚Äôt give up your rights to learn.\n\nDiscussion: use our Discord or NTHU eLearn to ask questions, discuss ideas, and share insights. You may talk about general concepts, debugging strategies, and how the system works. Treat your classmates like you‚Äôre a TA: offer hints, guide their thinking, don‚Äôt do the work for them.\nYou must NOT share code directly, whether in Discord, GitHub, or private messages. This includes past code from previous students or online sources.\nLabs are team-based, but you are personally responsible for understanding everything your team submits. Do not submit work that is not your own ‚Äî even if someone offers it freely. We will scan your code with plagiarism checker.\nAll quizzes and exams must be your own individual work."},{"objectID":"admin/policies.html#use-of-llm","href":"admin/policies.html#use-of-llm","title":"Course Policies","section":"","text":"ChatGPT, Github Copilot or other kinds of LLM can be a great tool, but it will limit your learning if you rely on it too much. Remember: you spend your time here not just to get grade, but to learn and make this knowledge your own. Here‚Äôs my advice:\n\nLearn how to ask: LLMs are most helpful when you know what to ask it and how to interpret its result, NOT when you copy+paste questions and then copy+paste the answer it provides.\nGet definition: If you‚Äôre asking questions about OS definitions or explanations about terminology, that‚Äôs great! LLM can be a great Google replacement.\nFor programming lab assignments, try to write your code independently first. If you get stuck, it‚Äôs okay to ask an LLM for guidance on function usage or debugging help, but make sure you understand the solution. Never submit code that you don‚Äôt thoroughly understand.\nIf you‚Äôre brainstorming approaches to a problem, always think on your own first and then ask an LLM to expand your ideas. You don‚Äôt want to limit your thinking by relying on AI first. Always test what you understand.\n\nGenerally: always consider whether you learned something more/better from your interaction with an LLM (the goal!) or if all you did was get an answer you don‚Äôt understand (NOT the goal).\nLLM is not allowed in quizzes, the midterm, and final exam (which are closed book)."},{"objectID":"admin/schedule.html","href":"admin/schedule.html","title":"Operating System (2025 Fall)","section":"","text":"Back to top"},{"objectID":"quizzes/quiz01.html","href":"quizzes/quiz01.html","title":"Operating System (2025 Fall)","section":"","text":"Back to top"},{"objectID":"topics/ptt.html","href":"topics/ptt.html","title":"PTTBBS Stress Test","section":"","text":"You will personally launch a PTTBBS server and teach us how it‚Äôs possible the server architecture is able to serve 100000+ ÈÑâÊ∞ë architecture.\nYou will demo stress test where you flood the server with concurrent connections and analyze its performance in real-time.\n\n\n1997 NTHU BBS Admin Discussion:\n\nMaple 3 ÊáâÁî®ÂØ¶‰æã ‚Äì Maple ÁôºÊ∫êÂú∞Ôºåbbs.cs.nthu.edu.tw Á∏ΩÈÉ®\nÁúãÈÅé Maple 3 ÁöÑ sourceÔºåwoju Ë¶∫Âæó:\nAMD-K6-200 + 128M ram + FreeBSD 2.2 + Maple 3\nÁ∂ìÁáüÂÄã 2000~3000 ‰∫∫ ÂêåÊôÇ ‰∏äÁ∑öÁöÑ BBS ÊòØÂÄã„ÄåÂêàÁêÜÁöÑÊáâÁî®„Äç ;-)\nÂ∏åÊúõÂèØ‰ª•‰πüÊúâSobÁöÑÁ≤æÁ∑ªÂäüËÉΩ\nÈÇÑÊúâ‰πüÂ∏åÊúõËÉΩÂ§†Ë∑üSobÁõ∏ÂÆπÈÇ£Êõ¥Â•ΩÂõâ\nMaple 3 ÊòØÂ•ó„ÄåÊ•µÁÇ∫ÂÖàÈÄ≤„ÄçÁöÑ telnet-based-BBSÔºåÊúâÁ®ÆÁ®Æ„ÄåÂè¶È°ûÈ¢®Âë≥„ÄçÁöÑ„ÄåÁ≤æÁ∑ªÂäüËÉΩ„Äç :-)\n\nBut can you do so?\n\n\n\n\n\nBegin your video with a brief, verbal explanation of the PTTBBS server architecture. You must cover:\n\nThe roles of the logind (dispatcher) and mbbsd (worker) processes and how they interact.\nThe concept of the ‚ÄúFork-on-Demand‚Äù process model. Please explain when and why new processes are created (user login?).\n\n\n\n\nPerform a live demonstration with two terminal windows:\n\nWindow A (User Action): Use a telnet client to connect to your running BBS server and log in as guest.\nWindow B (System Monitoring): Display a real-time view of the server‚Äôs processes using a tool like htop.\n\nAs you log in in Window A, point out the moment a new mbbsd process is dynamically created to handle your single connection. Show that the process terminates when you log out.\n\n\n\nRun a stress-testing script that you have written.\nThe script generates a large number of concurrent connections (your goal should be 1000+) that log in as guest.\nWhile your script is running, you must keep the htop window visible. As the server load increases, analyze what you are seeing in htop. Your analysis should include:\n\nThe total number of mbbsd processes being created.\nThe system‚Äôs CPU and memory response to the load (show us when you will hit overload in mbbsd.c, you can change MAX_CPULOAD, MAX_GUEST in include/config.h).\nConnection failures or errors that occur.\n\n\n\n\n\nPTTBBS Docker Wiki\nVery helpful document!"},{"objectID":"topics/ptt.html#requirements","href":"topics/ptt.html#requirements","title":"PTTBBS Stress Test","section":"","text":"Begin your video with a brief, verbal explanation of the PTTBBS server architecture. You must cover:\n\nThe roles of the logind (dispatcher) and mbbsd (worker) processes and how they interact.\nThe concept of the ‚ÄúFork-on-Demand‚Äù process model. Please explain when and why new processes are created (user login?).\n\n\n\n\nPerform a live demonstration with two terminal windows:\n\nWindow A (User Action): Use a telnet client to connect to your running BBS server and log in as guest.\nWindow B (System Monitoring): Display a real-time view of the server‚Äôs processes using a tool like htop.\n\nAs you log in in Window A, point out the moment a new mbbsd process is dynamically created to handle your single connection. Show that the process terminates when you log out.\n\n\n\nRun a stress-testing script that you have written.\nThe script generates a large number of concurrent connections (your goal should be 1000+) that log in as guest.\nWhile your script is running, you must keep the htop window visible. As the server load increases, analyze what you are seeing in htop. Your analysis should include:\n\nThe total number of mbbsd processes being created.\nThe system‚Äôs CPU and memory response to the load (show us when you will hit overload in mbbsd.c, you can change MAX_CPULOAD, MAX_GUEST in include/config.h).\nConnection failures or errors that occur.\n\n\n\n\n\nPTTBBS Docker Wiki\nVery helpful document!"},{"objectID":"topics/chrome.html","href":"topics/chrome.html","title":"Chrome‚Äôs Multi-Process Architecture and IPC","section":"","text":"In the early days of the web, a single misbehaving tab could crash your entire web browser. Google Chrome introduced a multi-process architecture. This makes the browser look like its own mini-operating system.\nBut with processes isolated from each other for security, how do they actually work together to render a webpage? Your mission is to create a video that explain how Chrome is split into multiple processes and how these processes communicate securely and efficiently to turn a URL into a fully rendered, interactive webpage.\n\n\n\n\nFirst, you should introduce these components:\n\nThe Browser Process: The main coordinator. What are its main responsibilities?\nThe Renderer Process: The single website instance. Why is it so heavily sandboxed?\nThe GPU Process: Why is graphics rendering handled in a separate process?\n\n\n\n\nExplain how Chrome does IPC.\n\n\n\nTrace the IPC messages required when a user types a URL into the address bar and seeing the page appear.\n\nNavigation: What messages are exchanged between the Browser Process and a Renderer Process to start loading a page?\nRendering Content: When the renderer needs to draw to the screen, how does it communicate with the GPU Process?\nDisplaying the Result: How is the final rendered image composed and displayed back to the user? Use diagrams to illustrate this flow of communication.\n\n\n\n\n\n\nHow browser work\nHow browser draw graphics"},{"objectID":"topics/chrome.html#requirements","href":"topics/chrome.html#requirements","title":"Chrome‚Äôs Multi-Process Architecture and IPC","section":"","text":"First, you should introduce these components:\n\nThe Browser Process: The main coordinator. What are its main responsibilities?\nThe Renderer Process: The single website instance. Why is it so heavily sandboxed?\nThe GPU Process: Why is graphics rendering handled in a separate process?\n\n\n\n\nExplain how Chrome does IPC.\n\n\n\nTrace the IPC messages required when a user types a URL into the address bar and seeing the page appear.\n\nNavigation: What messages are exchanged between the Browser Process and a Renderer Process to start loading a page?\nRendering Content: When the renderer needs to draw to the screen, how does it communicate with the GPU Process?\nDisplaying the Result: How is the final rendered image composed and displayed back to the user? Use diagrams to illustrate this flow of communication."},{"objectID":"topics/chrome.html#references","href":"topics/chrome.html#references","title":"Chrome‚Äôs Multi-Process Architecture and IPC","section":"","text":"How browser work\nHow browser draw graphics"}]